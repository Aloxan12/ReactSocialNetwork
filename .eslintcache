[{"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\kabzda\\src\\App.tsx":"1","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\React\\src\\index.tsx":"2","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\React\\src\\reportWebVitals.ts":"3","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\React\\src\\App.tsx":"4","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\index.tsx":"5","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\reportWebVitals.ts":"6","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\App.tsx":"7","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\redux-store.tsx":"8","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\profile-reducer.tsx":"9","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\navbar-reducer.tsx":"10","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\dialogs-reducer.tsx":"11","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Music\\Music.tsx":"12","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Navbar\\Navbar.tsx":"13","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\Profile.tsx":"14","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\DialogsContainer.tsx":"15","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\News\\News.tsx":"16","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Setting\\Setting.tsx":"17","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Header\\Header.jsx":"18","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\store.tsx":"19","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\Dialogs.tsx":"20","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Navbar\\Friends\\Friends.tsx":"21","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"22","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\DialogsItem\\DialogItem.tsx":"23","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\Message\\Message.tsx":"24","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Navbar\\Friends\\Friend\\Friend.tsx":"25","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"26","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"27","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\MyPosts\\Post.tsx":"28"},{"size":1067,"mtime":1612078330240,"results":"29","hashOfConfig":"30"},{"size":826,"mtime":1616245688968,"results":"31","hashOfConfig":"32"},{"size":440,"mtime":1612109146308,"results":"33","hashOfConfig":"32"},{"size":1379,"mtime":1616253906588,"results":"34","hashOfConfig":"32"},{"size":826,"mtime":1616245688968,"results":"35","hashOfConfig":"36"},{"size":440,"mtime":1612109146308,"results":"37","hashOfConfig":"36"},{"size":1400,"mtime":1616315063734,"results":"38","hashOfConfig":"36"},{"size":542,"mtime":1616077066859,"results":"39","hashOfConfig":"36"},{"size":1122,"mtime":1615631792553,"results":"40","hashOfConfig":"36"},{"size":591,"mtime":1615631792518,"results":"41","hashOfConfig":"36"},{"size":1568,"mtime":1616074132670,"results":"42","hashOfConfig":"36"},{"size":201,"mtime":1612543385368,"results":"43","hashOfConfig":"36"},{"size":1118,"mtime":1615621728473,"results":"44","hashOfConfig":"36"},{"size":513,"mtime":1616315063688,"results":"45","hashOfConfig":"36"},{"size":1981,"mtime":1616314048021,"results":"46","hashOfConfig":"36"},{"size":197,"mtime":1612543423026,"results":"47","hashOfConfig":"36"},{"size":209,"mtime":1612543461324,"results":"48","hashOfConfig":"36"},{"size":340,"mtime":1612260986079,"results":"49","hashOfConfig":"36"},{"size":5379,"mtime":1616077448084,"results":"50","hashOfConfig":"36"},{"size":1726,"mtime":1616314047979,"results":"51","hashOfConfig":"36"},{"size":709,"mtime":1615621728385,"results":"52","hashOfConfig":"36"},{"size":355,"mtime":1612872796967,"results":"53","hashOfConfig":"36"},{"size":674,"mtime":1613556677553,"results":"54","hashOfConfig":"36"},{"size":348,"mtime":1613287870744,"results":"55","hashOfConfig":"36"},{"size":529,"mtime":1613560039673,"results":"56","hashOfConfig":"36"},{"size":2005,"mtime":1616314727514,"results":"57","hashOfConfig":"36"},{"size":1314,"mtime":1616314979652,"results":"58","hashOfConfig":"36"},{"size":510,"mtime":1615621728454,"results":"59","hashOfConfig":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"9hwq42",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6ihfv8",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"17rjzn8",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"71"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"71"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"71"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"71"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"71"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"71"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"71"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"71"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"71"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"71"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"71"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"71"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"71"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\kabzda\\src\\App.tsx",["135","136","137","138","139","140","141"],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\React\\src\\index.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\React\\src\\reportWebVitals.ts",[],["142","143"],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\React\\src\\App.tsx",["144","145"],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\index.tsx",[],["146","147"],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\reportWebVitals.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\App.tsx",["148","149"],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\redux-store.tsx",["150"],"import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\nimport {StoreType} from \"./store\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarPage:navbarReducer,\r\n})\r\n\r\nexport type RootReduxStateType = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers);\r\nexport  type StoreReduxType = typeof store\r\n\r\nexport default store","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\profile-reducer.tsx",["151","152"],"import {ActionType, postType, profilePageType} from \"./store\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello, It is my first massage\", likeCounts: 15},\r\n        {id: 2, message: \"Hello, I am Lesha\", likeCounts: 30},\r\n    ],\r\n    newPostText: \"\"\r\n}\r\n\r\nconst profileReducer = (state: profilePageType = initialState, action: ActionType)=>{\r\n    switch (action.type){\r\n        case \"ADD-POST\":\r\n            let newPost: postType = {\r\n                id: new Date().getTime(),\r\n                message: action.postMessage,\r\n                likeCounts: 0\r\n            }\r\n            state.posts.push(newPost)\r\n            return state\r\n        case \"UPDATE-YOUR-POST-TEXT\":\r\n            state.newPostText = action.newText;\r\n            return state\r\n        default: return state\r\n    }\r\n}\r\nconst addPostActionCreate =(postText:string)=>{\r\n    return{\r\n        type:'ADD-POST',\r\n        postMessage: postText\r\n    }as const\r\n}\r\nconst changeNewTextCreate =(newText:string)=>{\r\n    return{\r\n        type:'UPDATE-YOUR-POST-TEXT',\r\n        newText: newText\r\n    }as const\r\n}\r\n\r\nexport default profileReducer","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\navbar-reducer.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\dialogs-reducer.tsx",["153","154","155"],"import {ActionType, dialogsPageType, StateType} from \"./store\";\r\n\r\ntype messageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype dialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype initialStateType = {\r\n    messages: Array<messageType>\r\n    dialogs:Array<dialogsType>\r\n    newMessage: string\r\n}\r\nlet initialState: initialStateType = {\r\n    messages: [\r\n        { id: 1, message: \"Hi\"},\r\n        { id: 2, message: \"I am here\"},\r\n        { id: 3, message: \"bye\"},\r\n    ],\r\n    dialogs: [\r\n        { id: 1, name: \"Alex\"},\r\n        { id: 2, name: \"Victor\"},\r\n        { id: 3, name: \"Sasha\"},\r\n        { id: 4, name: \"Mike\"},\r\n        { id: 5, name: \"Bob\"},\r\n    ],\r\n    newMessage:'Hello'\r\n}\r\n\r\nconst dialogsReducer = (state: dialogsPageType = initialState, action: ActionType)=>{\r\n    switch (action.type){\r\n        case \"ADD-MESSAGE\":\r\n            let newMessage: messageType = {\r\n                id: new Date().getTime(),\r\n                message: action.postMessage,\r\n            }\r\n            state.messages.push(newMessage)\r\n            return state\r\n        case \"UPDATE-YOUR-MESSAGE-TEXT\":\r\n            state.newMessage = action.newText;\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst addMessageActionCreate =(messageText:string)=>{\r\n    return{\r\n        type:'ADD-MESSAGE',\r\n        postMessage: messageText\r\n    }as const\r\n}\r\nconst changeNewMessageTextCreate =(newText:string)=>{\r\n    return{\r\n        type:'UPDATE-YOUR-MESSAGE-TEXT',\r\n        newText: newText\r\n    }as const\r\n}\r\nexport default dialogsReducer","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Music\\Music.tsx",["156"],"import React from 'react'\r\nimport classes from './Music.module.css'\r\n\r\nconst Music = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Navbar\\Navbar.tsx",["157"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes  from './Navbar.module.css';\r\nimport Friends from \"./Friends/Friends\";\r\nimport {friendsType, friendType} from \"../../redux/store\";\r\n\r\nexport type NavbarType = {\r\n    state:friendsType\r\n}\r\n\r\nconst Navbar = (props: NavbarType)=>{\r\n    return ( <nav className={classes.nav}>\r\n    <div className={classes.item}>\r\n      <NavLink to=\"/profile\" activeClassName={classes.activLink}>Profile</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n      <NavLink to=\"/dialogs\"  activeClassName={classes.activLink}>Massage</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n      <NavLink to=\"/news\" activeClassName={classes.activLink}>News</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n      <NavLink to=\"/music\" activeClassName={classes.activLink}>Music</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n      <NavLink to=\"/setting\" activeClassName={classes.activLink}>Setting</NavLink>\r\n    </div>\r\n    <div>\r\n        <Friends state={props.state} />\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\nexport default Navbar;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\Profile.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\DialogsContainer.tsx",["158","159","160","161","162","163","164","165"],"import React, {ChangeEvent} from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogsItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {ActionType,addMessageActionCreate,changeNewMessageTextCreate,dialogsPageType} from \"../../redux/store\";\r\nimport store, {StoreReduxType} from \"../../redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype DialogsType = {\r\n}\r\n\r\n// const DialogsContainer = (props: DialogsType ) =>{\r\n//\r\n//     return (\r\n//         // <StoreContext.Consumer>{(store)=>{\r\n//         //     let state = store.getState().dialogsPage\r\n//         //\r\n//         //     let addMessage = () =>{\r\n//         //         store.dispatch(addMessageActionCreate(state.newMessage))\r\n//         //         store.dispatch(changeNewMessageTextCreate(''))\r\n//         //\r\n//         //     }\r\n//         //     let newTextMessageChange = (e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n//         //         store.dispatch(changeNewMessageTextCreate(e.currentTarget.value))\r\n//         //     }\r\n//         //     return <Dialogs\r\n//         //         changeNewMessageText={newTextMessageChange}\r\n//         //         state={state}\r\n//         //         addMessage={addMessage}\r\n//         //     />\r\n//         // }}\r\n//         // </StoreContext.Consumer>\r\n//     );\r\n// }\r\n\r\n\r\nconst mapStateToProps = (state: dialogsPageType)=>{\r\n    return{\r\n        dialogsPage: state\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: any)=>{\r\n    return{\r\n        changeNewMessageText:(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n            dispatch(changeNewMessageTextCreate(e.currentTarget.value))\r\n        },\r\n        addMessage:(newMessage: string)=>{\r\n            dispatch(addMessageActionCreate(newMessage))\r\n            dispatch(changeNewMessageTextCreate(''))\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\News\\News.tsx",["166"],"import React from 'react'\r\nimport classes from './News.module.css'\r\n\r\nconst News = (props: any) =>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Setting\\Setting.tsx",["167"],"import React from 'react'\r\nimport classes from './Setting.module.css'\r\n\r\nconst Setting = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Setting;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Header\\Header.jsx",[],["168","169"],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\redux\\store.tsx",["170"],"import profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\n\r\nlet _CallSubscriber = (s:StateType)=>{}\r\n\r\nexport type messageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type dialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type friendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\nexport type postType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\nexport type profilePageType = {\r\n    posts: Array<postType>\r\n    newPostText:string\r\n}\r\nexport type dialogsPageType = {\r\n    messages:Array<messageType>\r\n    dialogs:Array<dialogsType>\r\n    newMessage: string\r\n}\r\nexport type friendsType = {\r\n    friends:Array<friendType>\r\n}\r\n\r\n\r\nexport type StateType = {\r\n    profilePage:profilePageType\r\n    dialogsPage: dialogsPageType\r\n    navbarPage:friendsType\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: StateType,\r\n    _CallSubscriber:(s: StateType)=>void,\r\n    getState:()=> StateType,\r\n    subscribe:(callback:()=>void)=>void,\r\n    addPostCallback:(postMessage: string)=>void,\r\n    updateYourPostText:(newText: string)=>void,\r\n    dispatch:(action: ActionType )=> void\r\n}\r\n\r\nexport type ActionType = ReturnType<typeof addPostActionCreate>\r\n                        | ReturnType<typeof changeNewTextCreate>\r\n                        | ReturnType<typeof addMessageActionCreate>\r\n                        | ReturnType<typeof changeNewMessageTextCreate>\r\n\r\nlet store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, message: \"Hello, It is my first massage\", likeCounts: 15},\r\n                {id: 2, message: \"Hello, I am Lesha\", likeCounts: 30},\r\n            ],\r\n            newPostText: \"\"\r\n        },\r\n        dialogsPage:{\r\n            messages: [\r\n                { id: 1, message: \"Hi\"},\r\n                { id: 2, message: \"I am here\"},\r\n                { id: 3, message: \"bye\"},\r\n            ],\r\n            dialogs: [\r\n                { id: 1, name: \"Alex\"},\r\n                { id: 2, name: \"Victor\"},\r\n                { id: 3, name: \"Sasha\"},\r\n                { id: 4, name: \"Mike\"},\r\n                { id: 5, name: \"Bob\"},\r\n            ],\r\n            newMessage:'Hello'\r\n        },\r\n        navbarPage:{\r\n            friends: [\r\n                { id: 1, name: 'Kirill', src:\"https://cdni.rt.com/russian/images/2019.03/article/5c99e32a18356130668b45a2.JPG\"},\r\n                { id: 2, name: \"Peeter\", src: \"https://vokrug-tv.ru/pic/person/2/2/d/b/22db573c1118bc091c4267e15258d8ce.jpeg\"},\r\n                { id: 3, name: \"Vlad\", src: \"https://upload.wikimedia.org/wikipedia/ru/4/4e/Patrick_star-4854.jpg\"},\r\n            ],\r\n        }\r\n    },\r\n    _CallSubscriber(s: StateType){},\r\n\r\n    getState(){\r\n        return this._state;\r\n    },\r\n    subscribe (observer){\r\n        this._CallSubscriber = observer\r\n    },\r\n\r\n    addPostCallback(postMessage: string){\r\n        let newPost: postType = {\r\n            id: new Date().getTime(),\r\n            message: postMessage,\r\n            likeCounts: 0\r\n        }\r\n        this._state.profilePage.posts.push(newPost)\r\n        this._CallSubscriber(this._state)\r\n    },\r\n    updateYourPostText(newText: string){\r\n        this._state.profilePage.newPostText = newText;\r\n        this._CallSubscriber(this._state)\r\n    },\r\n    dispatch(action){\r\n\r\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\r\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\r\n        this._state.navbarPage = navbarReducer(this._state.navbarPage, action)\r\n        this._CallSubscriber(this._state)\r\n\r\n\r\n        // if(action.type === 'ADD-POST'){\r\n        //     let newPost: postType = {\r\n        //         id: new Date().getTime(),\r\n        //         message: action.postMessage,\r\n        //         likeCounts: 0\r\n        //     }\r\n        //     this._state.profilePage.posts.push(newPost)\r\n        //     this._CallSubscriber(this._state)\r\n        // }else if(action.type === 'UPDATE-YOUR-POST-TEXT'){\r\n        //     this._state.profilePage.newPostText = action.newText;\r\n        //     this._CallSubscriber(this._state)\r\n        // }else if(action.type === 'ADD-MESSAGE'){\r\n        //     let newMessage: messageType = {\r\n        //         id: new Date().getTime(),\r\n        //         message: action.postMessage,\r\n        //     }\r\n        //     this._state.dialogsPage.messages.push(newMessage)\r\n        //     this._CallSubscriber(this._state)\r\n        // }else if(action.type === 'UPDATE-YOUR-MESSAGE-TEXT'){\r\n        //     this._state.dialogsPage.newMessage = action.newText;\r\n        //     this._CallSubscriber(this._state)\r\n        // }\r\n    }\r\n}\r\nexport const addPostActionCreate =(postText:string)=>{\r\n    return{\r\n        type:'ADD-POST',\r\n        postMessage: postText\r\n    }as const\r\n}\r\nexport const changeNewTextCreate =(newText:string)=>{\r\n    return{\r\n        type:'UPDATE-YOUR-POST-TEXT',\r\n        newText: newText\r\n    }as const\r\n}\r\nexport const addMessageActionCreate =(messageText:string)=>{\r\n    return{\r\n        type:'ADD-MESSAGE',\r\n        postMessage: messageText\r\n    }as const\r\n}\r\nexport const changeNewMessageTextCreate =(newText:string)=>{\r\n    return{\r\n        type:'UPDATE-YOUR-MESSAGE-TEXT',\r\n        newText: newText\r\n    }as const\r\n}\r\n\r\n\r\n\r\nexport default store\r\n\r\n","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\Dialogs.tsx",["171","172","173","174","175","176"],"import React, {ChangeEvent} from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogsItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {\r\n    ActionType,\r\n    addMessageActionCreate,\r\n    changeNewMessageTextCreate,\r\n    dialogsPageType, dialogsType,\r\n    messageType\r\n} from \"../../redux/store\";\r\nimport {StoreReduxType} from \"../../redux/redux-store\";\r\n\r\ntype DialogsType = {\r\n    changeNewMessageText:(e:ChangeEvent<HTMLTextAreaElement>)=> void\r\n    state:dialogsPageType\r\n    addMessage:(textMessage: string)=>void\r\n}\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props: DialogsType ) =>{\r\n    let dialogsElements = props.state.dialogs.map( d =><DialogsItem id={d.id} name={d.name}  /> )\r\n    let messageElements = props.state.messages.map(m => <Message message={m.message} /> )\r\n\r\n\r\n    let addMessage = () =>{\r\n        props.addMessage('')\r\n            // props.store.dispatch(addMessageActionCreate(props.newMessage))\r\n            // props.store.dispatch(changeNewMessageTextCreate(''))\r\n\r\n    }\r\n    let newTextMessageChange = (e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        props.changeNewMessageText(e)\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.massages}>\r\n                {messageElements}\r\n                <div className={classes.addMessage}>\r\n                    <textarea value={props.state.newMessage} onChange={newTextMessageChange}></textarea>\r\n                    <button onClick={addMessage}>AddMessage</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Navbar\\Friends\\Friends.tsx",["177"],"import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport Friend from \"./Friend/Friend\";\r\nimport {friendsType} from \"../../../redux/store\";\r\nimport {NavbarType} from \"../Navbar\";\r\n\r\nexport type FriendsType = {\r\n    state:friendsType\r\n}\r\n\r\nconst Friends = (props: FriendsType)=>{\r\n    let friendsElements = props.state.friends.map( d =><Friend id={d.id} name={d.name} src={d.src}  /> )\r\n    return (\r\n        <div>\r\n            <div className={classes.blockFriends}>\r\n                <h3>Friends</h3>\r\n                <div className={classes.friends}>\r\n                    {friendsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Friends;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["178"],"import React from 'react';\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\nconst ProfileInfo = ()=>{\r\n    return ( <div className={classes.content}>\r\n    <div>\r\n      <img src=\"http://www.rosphoto.com/images/u/articles/1511/4-dalius-baranauskas.jpg\" alt=\"photo\" className={classes.mainimg}/>\r\n    </div>\r\n  </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\DialogsItem\\DialogItem.tsx",["179","180"],"import { type } from 'os'\r\nimport React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\nexport type DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogsItem = (props:DialogsItemType) =>{\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className= {classes.dialog + ' ' + classes.active}>\r\n            <div>\r\n            <img src=\"https://img3.goodfon.ru/wallpaper/nbig/f/67/naruto-shippuden-uzumaki-31.jpg\" />\r\n            </div>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Dialogs\\Message\\Message.tsx",["181","182"],"import { type } from 'os'\r\nimport React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\nconst Message = (props:MessageType)=>{\r\n    return (\r\n        <div className={classes.massage}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Navbar\\Friends\\Friend\\Friend.tsx",["183","184"],"import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type FriendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nconst Friends = (props: FriendType)=>{\r\n    let path = \"/Navbar/\" + props.id;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.src} />\r\n            </div>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default Friends;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["185","186","187","188"],"import React, {ChangeEvent} from 'react';\r\nimport classes from \"./MyPosts.module.css\"\r\nimport Post from './Post';\r\nimport {\r\n    addPostActionCreate,\r\n    changeNewTextCreate,\r\n    profilePageType\r\n} from \"../../../redux/store\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreReduxType} from \"../../../redux/redux-store\";\r\n\r\nexport type MyPostsContainerType = {\r\n}\r\n\r\n\r\n    //const MyPostsContainer = (props: MyPostsContainerType) => {\r\n    // return (\r\n    //     <StoreContext.Consumer>{(store)=>{\r\n    //         let state = store.getState().profilePage\r\n    //         let addPost = () => {\r\n    //             store.dispatch(addPostActionCreate(state.newPostText))\r\n    //             store.dispatch(changeNewTextCreate(''))\r\n    //         }\r\n    //         let newTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //             store.dispatch(changeNewTextCreate(e.currentTarget.value))\r\n    //         }\r\n    //         return <MyPosts onAddPost={addPost}\r\n    //                  onNewTextChange={newTextChange}\r\n    //                  posts={state.posts}\r\n    //                  newPostText={state.newPostText}\r\n    //         />\r\n    //     }}\r\n    //     </StoreContext.Consumer>\r\n    // )\r\n    const mapStateToProps = (state: profilePageType)=>{\r\n        return{\r\n            profilePage:state,\r\n            posts: state.posts,\r\n            newPostText: state.newPostText,\r\n        }\r\n    };\r\n    const mapDispatchToProps = (dispatch: any)=> {\r\n        return {\r\n            onAddPost: (newPostText: string) => {\r\n                dispatch(addPostActionCreate(newPostText))\r\n                dispatch(changeNewTextCreate(''))\r\n            },\r\n            onNewTextChange: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n                dispatch(changeNewTextCreate(e.currentTarget.value))\r\n            }\r\n        }\r\n    };\r\n\r\n    const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["189"],"C:\\Users\\Aleksey\\Desktop\\main\\kabzda01\\copy\\The-Social-Network\\src\\components\\Profile\\MyPosts\\Post.tsx",[],{"ruleId":"190","severity":1,"message":"191","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":12},{"ruleId":"194","severity":1,"message":"195","line":9,"column":9,"nodeType":"196","endLine":9,"endColumn":20},{"ruleId":"194","severity":1,"message":"195","line":12,"column":9,"nodeType":"196","endLine":12,"endColumn":20},{"ruleId":"194","severity":1,"message":"195","line":15,"column":9,"nodeType":"196","endLine":15,"endColumn":20},{"ruleId":"194","severity":1,"message":"195","line":18,"column":9,"nodeType":"196","endLine":18,"endColumn":20},{"ruleId":"194","severity":1,"message":"195","line":21,"column":9,"nodeType":"196","endLine":21,"endColumn":20},{"ruleId":"197","severity":1,"message":"198","line":27,"column":9,"nodeType":"196","endLine":27,"endColumn":140},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"190","severity":1,"message":"203","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":15},{"ruleId":"190","severity":1,"message":"204","line":12,"column":8,"nodeType":"192","messageId":"193","endLine":12,"endColumn":24},{"ruleId":"199","replacedBy":"205"},{"ruleId":"201","replacedBy":"206"},{"ruleId":"190","severity":1,"message":"203","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":15},{"ruleId":"190","severity":1,"message":"207","line":13,"column":8,"nodeType":"192","messageId":"193","endLine":13,"endColumn":29},{"ruleId":"190","severity":1,"message":"208","line":5,"column":9,"nodeType":"192","messageId":"193","endLine":5,"endColumn":18},{"ruleId":"190","severity":1,"message":"209","line":27,"column":7,"nodeType":"192","messageId":"193","endLine":27,"endColumn":26},{"ruleId":"190","severity":1,"message":"210","line":33,"column":7,"nodeType":"192","messageId":"193","endLine":33,"endColumn":26},{"ruleId":"190","severity":1,"message":"211","line":1,"column":38,"nodeType":"192","messageId":"193","endLine":1,"endColumn":47},{"ruleId":"190","severity":1,"message":"212","line":48,"column":7,"nodeType":"192","messageId":"193","endLine":48,"endColumn":29},{"ruleId":"190","severity":1,"message":"213","line":54,"column":7,"nodeType":"192","messageId":"193","endLine":54,"endColumn":33},{"ruleId":"190","severity":1,"message":"214","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":15},{"ruleId":"190","severity":1,"message":"215","line":5,"column":22,"nodeType":"192","messageId":"193","endLine":5,"endColumn":32},{"ruleId":"190","severity":1,"message":"216","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":13},{"ruleId":"190","severity":1,"message":"214","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":15},{"ruleId":"190","severity":1,"message":"217","line":3,"column":8,"nodeType":"192","messageId":"193","endLine":3,"endColumn":19},{"ruleId":"190","severity":1,"message":"218","line":4,"column":8,"nodeType":"192","messageId":"193","endLine":4,"endColumn":15},{"ruleId":"190","severity":1,"message":"219","line":5,"column":9,"nodeType":"192","messageId":"193","endLine":5,"endColumn":19},{"ruleId":"190","severity":1,"message":"220","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":13},{"ruleId":"190","severity":1,"message":"221","line":6,"column":16,"nodeType":"192","messageId":"193","endLine":6,"endColumn":30},{"ruleId":"190","severity":1,"message":"222","line":10,"column":6,"nodeType":"192","messageId":"193","endLine":10,"endColumn":17},{"ruleId":"190","severity":1,"message":"214","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":15},{"ruleId":"190","severity":1,"message":"214","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":15},{"ruleId":"199","replacedBy":"205"},{"ruleId":"201","replacedBy":"206"},{"ruleId":"190","severity":1,"message":"223","line":5,"column":5,"nodeType":"192","messageId":"193","endLine":5,"endColumn":20},{"ruleId":"190","severity":1,"message":"219","line":6,"column":5,"nodeType":"192","messageId":"193","endLine":6,"endColumn":15},{"ruleId":"190","severity":1,"message":"224","line":7,"column":5,"nodeType":"192","messageId":"193","endLine":7,"endColumn":27},{"ruleId":"190","severity":1,"message":"225","line":8,"column":5,"nodeType":"192","messageId":"193","endLine":8,"endColumn":31},{"ruleId":"190","severity":1,"message":"226","line":9,"column":22,"nodeType":"192","messageId":"193","endLine":9,"endColumn":33},{"ruleId":"190","severity":1,"message":"227","line":10,"column":5,"nodeType":"192","messageId":"193","endLine":10,"endColumn":16},{"ruleId":"190","severity":1,"message":"221","line":12,"column":9,"nodeType":"192","messageId":"193","endLine":12,"endColumn":23},{"ruleId":"190","severity":1,"message":"228","line":5,"column":9,"nodeType":"192","messageId":"193","endLine":5,"endColumn":19},{"ruleId":"197","severity":1,"message":"198","line":7,"column":7,"nodeType":"196","endLine":7,"endColumn":131},{"ruleId":"190","severity":1,"message":"229","line":1,"column":10,"nodeType":"192","messageId":"193","endLine":1,"endColumn":14},{"ruleId":"230","severity":1,"message":"231","line":17,"column":13,"nodeType":"196","endLine":17,"endColumn":102},{"ruleId":"190","severity":1,"message":"229","line":1,"column":10,"nodeType":"192","messageId":"193","endLine":1,"endColumn":14},{"ruleId":"190","severity":1,"message":"232","line":3,"column":10,"nodeType":"192","messageId":"193","endLine":3,"endColumn":17},{"ruleId":"190","severity":1,"message":"214","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":15},{"ruleId":"230","severity":1,"message":"231","line":16,"column":17,"nodeType":"196","endLine":16,"endColumn":40},{"ruleId":"190","severity":1,"message":"216","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":13},{"ruleId":"190","severity":1,"message":"214","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":15},{"ruleId":"190","severity":1,"message":"233","line":3,"column":8,"nodeType":"192","messageId":"193","endLine":3,"endColumn":12},{"ruleId":"190","severity":1,"message":"221","line":11,"column":9,"nodeType":"192","messageId":"193","endLine":11,"endColumn":23},{"ruleId":"190","severity":1,"message":"234","line":4,"column":9,"nodeType":"192","messageId":"193","endLine":4,"endColumn":17},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-native-reassign",["235"],"no-negated-in-lhs",["236"],"'Dialogs' is defined but never used.","'DialogsContainer' is defined but never used.",["235"],["236"],"'SuperDialogsContainer' is defined but never used.","'StoreType' is defined but never used.","'addPostActionCreate' is assigned a value but never used.","'changeNewTextCreate' is assigned a value but never used.","'StateType' is defined but never used.","'addMessageActionCreate' is assigned a value but never used.","'changeNewMessageTextCreate' is assigned a value but never used.","'classes' is defined but never used.","'friendType' is defined but never used.","'React' is defined but never used.","'DialogsItem' is defined but never used.","'Message' is defined but never used.","'ActionType' is defined but never used.","'store' is defined but never used.","'StoreReduxType' is defined but never used.","'DialogsType' is defined but never used.","'_CallSubscriber' is assigned a value but never used.","'addMessageActionCreate' is defined but never used.","'changeNewMessageTextCreate' is defined but never used.","'dialogsType' is defined but never used.","'messageType' is defined but never used.","'NavbarType' is defined but never used.","'type' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'NavLink' is defined but never used.","'Post' is defined but never used.","'postType' is defined but never used.","no-global-assign","no-unsafe-negation"]