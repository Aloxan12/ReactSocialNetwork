{"version":3,"sources":["utils/validators/validators.ts","assets/images/loader.gif","components/Common/Preloader/Preloader.tsx","components/Common/Paginator/Paginator.module.css","api/api.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","assets/images/user.png","components/Users/users.module.css","reportWebVitals.ts","components/Music/Music.tsx","components/News/News.tsx","components/Setting/Setting.tsx","redux/navbar-reducer.tsx","redux/users-reducer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","hoc/withSuspense.tsx","redux/auth-selector.tsx","components/Header/Header.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.tsx","api/users-api.ts","api/profile-api.ts","components/Common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","React","memo","src","preloader","module","exports","ResultCodesEnum","ResultCodeForCapcthaEnum","instance","axios","create","withCredentials","baseURL","headers","initialState","posts","id","message","likeCounts","profile","status","actions","addPostAC","postText","type","postMessage","deletePostAC","postId","setUserProfile","setStatus","savePhotoSuccess","photo","getUserProfile","userId","dispatch","a","UsersAPI","getProfile","data","getStatus","ProfileAPI","updateStatus","resultCode","Success","savePhoto","file","photos","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","addMessageAC","messageText","removeMessageAC","messageId","changeNewMessageTextCreate","newText","dialogsReducer","m","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Music","props","News","Setting","friends","navbarReducer","users","pageSize","totalUsersCounts","currentPage","isFetching","followingIsProgress","term","friend","userID","payload","totalPage","getUsers","items","totalCount","followUnfollow","apiMethod","actionCreator","usersReducer","map","u","followed","authAPI","get","res","email","password","rememberMe","captcha","post","response","delete","securityAPI","login","isAuth","captchaUrl","getAuthUsersData","meData","getCaptchaUrl","url","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","navbarPage","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Paginator","totalItemCounts","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","cn","styles","pageBlock","onClick","selectedPage","e","User","user","to","small","userPhoto","UsersPhoto","disabled","some","unfollow","follow","getUserSuper","createSelector","getPageSizeSelector","getTotalUsersCountsSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingIsProgressSelector","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","Users","totalUsersCount","followingInProgress","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","followU","bind","unfollowU","pageNumber","UsersContainer","pageTitle","LoginReduxForm","reduxForm","handleSubmit","error","createField","Input","undefined","style","someError","Login","formData","CaptchaIsRequired","withSuspense","WrappedComponent","Suspense","fallback","selectIsAuth","selectUserCurrent","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","this","initializedApp","window","addEventListener","removeEventListener","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","path","render","textAlign","Component","AppClass","compose","withRouter","connect","stateForNavbar","promise","all","catch","console","log","finally","AppContainer","basename","process","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","put","FormData","append"],"mappings":"kGAEA,oEAAO,IAAMA,EAA+B,SAACC,GACzC,IAAKA,EAEL,MAAO,qBAEEC,EAAkB,SAACC,GAAD,OAAwC,SAACF,GAChE,GAAGA,GAASA,EAAMG,OAAS,GAAG,MAAM,iBAAN,OAAwBD,EAAxB,e,qDCRvB,MAA0B,mC,OCGnCE,EAAYC,IAAMC,MAAK,WACzB,OAAO,8BACH,qBAAKC,IAAKC,SAGHJ,O,oBCPfK,EAAOC,QAAU,CAAC,UAAY,6BAA6B,aAAe,kC,gCCD1E,0GAUYC,EAIAC,EAdZ,SAGaC,EAHb,OAGwBC,EAAcC,OAAO,CACzCC,iBAAiB,EACjBC,QAAQ,gDACRC,QAAS,CACL,UAAW,2C,SAGPP,O,qBAAAA,I,kBAAAA,M,cAIAC,O,2CAAAA,M,+TCADO,EAAe,CACtBC,MAAO,CACH,CAACC,GAAI,EAAEC,QAAS,gCAAiCC,WAAY,IAC7D,CAACF,GAAI,EAAGC,QAAS,oBAAqBC,WAAY,KAEtDC,QAAQ,CACJ,QAAW,6EACX,SAAY,CACR,SAAY,eACZ,QAAW,GACX,GAAM,gBACN,QAAW,2BACX,UAAa,mBACb,QAAW,GACX,OAAU,aACV,SAAY,IAEhB,gBAAkB,EAClB,0BAA6B,8FAC7B,SAAY,iBACZ,OAAU,EACV,OAAU,CACN,MAAS,uFACT,MAAS,mFAGjBC,OAAQ,IAqCCC,EAAU,CACnBC,UAAW,SAACC,GAAD,MAAuB,CAACC,KAAM,WAAWC,YAAaF,IACjEG,aAAc,SAACC,GAAD,MAAqB,CAACH,KAAM,cAAcG,WACxDC,eAAgB,SAACT,GAAD,MAA2B,CAACK,KAAM,mBAAmBL,YACrEU,UAAW,SAACT,GAAD,MAAqB,CAACI,KAAM,aAAaJ,WACpDU,iBAAkB,SAACC,GAAD,MAAuB,CAACP,KAAM,qBAAqBO,WAG5DC,EAAiB,SAACC,GAAD,8CAAoC,WAAOC,GAAP,eAAAC,EAAA,sEAC3CC,IAASC,WAAWJ,GADuB,OACxDK,EADwD,OAE1DJ,EAASb,EAAQO,eAAeU,IAF0B,2CAApC,uDAIjBC,EAAY,SAACN,GAAD,8CAAoC,WAAOC,GAAP,eAAAC,EAAA,sEACrCK,IAAWD,UAAUN,GADgB,OAClDK,EADkD,OAErDJ,EAASb,EAAQQ,UAAUS,IAF0B,2CAApC,uDAIZG,EAAe,SAACrB,GAAD,8CAA8B,WAAOc,GAAP,SAAAC,EAAA,+EAE/BK,IAAWC,aAAarB,GAFO,cAG1CsB,aAAepC,IAAgBqC,SACnCT,EAASb,EAAQQ,UAAUT,IAJmB,uGAA9B,uDAUfwB,EAAY,SAACC,GAAD,8CAA2B,WAAOX,GAAP,eAAAC,EAAA,sEAC/BK,IAAWI,UAAUC,GADU,QAC5CP,EAD4C,QAEhCI,aAAepC,IAAgBqC,SACnCT,EAASb,EAAQS,iBAAiBQ,EAAKA,KAAKQ,SAHR,2CAA3B,uDAOZC,EAAc,SAAC5B,GAAD,8CAAqC,WAAOe,EAAUc,GAAjB,iBAAAb,EAAA,6DACtDF,EAASe,IAAWC,KAAKjC,GAD6B,SAEzCwB,IAAWO,YAAY5B,GAFkB,WAEtDmB,EAFsD,QAGpDI,aAAepC,IAAgBqC,QAHqB,oBAI3C,MAAVV,EAJqD,gBAKxDC,EAASF,EAAeC,IALgC,6BAO9C,IAAIiB,MAAM,wBAPoC,uCAUxDhB,EAASiB,YAAW,eAAgB,CAACC,OAAQd,EAAKe,SAAS,MAVH,kBAWjDC,QAAQC,OAAOjB,EAAKe,SAAS,KAXoB,4CAArC,yDAeZG,IAlFe,WAAiE,IAAhEC,EAA+D,uDAAvD3C,EAAc4C,EAAyC,uCAC1F,OAAQA,EAAOlC,MACX,IAAK,WACD,IAAMmC,EAAUD,EAAOjC,YACvB,OAAO,2BACAgC,GADP,IAEI1C,MAAM,GAAD,mBAAM0C,EAAM1C,OAAZ,CAAmB,CAACC,GAAI,EAAGC,QAAS0C,EAASzC,WAAY,OAEtE,IAAK,cACD,OAAO,2BACJuC,GADH,IAEA1C,MAAO0C,EAAM1C,MAAM6C,QAAO,SAAAC,GAAC,OAAGA,EAAE7C,IAAM0C,EAAO/B,YAEjD,IAAK,mBACD,OAAO,2BACA8B,GADP,IAEItC,QAASuC,EAAOvC,UAGxB,IAAK,aACD,OAAO,2BACAsC,GADP,IAEIrC,OAAQsC,EAAOtC,SAGvB,IAAK,qBACD,OAAO,2BAAIqC,GAAX,IAAkBtC,QAAQ,2BAAIsC,EAAMtC,SAAX,IAAoB2B,OAAQY,EAAO3B,UAEhE,QACI,OAAO0B,K,sFC5Db3C,EAAe,CACjBuC,SAAU,CACN,CAAErC,GAAI,EAAGC,QAAS,MAClB,CAAED,GAAI,EAAGC,QAAS,aAClB,CAAED,GAAI,EAAGC,QAAS,QAEtB6C,QAAS,CACL,CAAE9C,GAAI,EAAG+C,KAAM,QACf,CAAE/C,GAAI,EAAG+C,KAAM,UACf,CAAE/C,GAAI,EAAG+C,KAAM,SACf,CAAE/C,GAAI,EAAG+C,KAAM,QACf,CAAE/C,GAAI,EAAG+C,KAAM,SA2BV1C,EAAU,CACnB2C,aAAc,SAACC,GAAD,MAAuB,CAACzC,KAAK,cAAeC,YAAawC,IACvEC,gBAAgB,SAACC,GAAD,MAAqB,CAAC3C,KAAK,iBAAiB2C,cAC5DC,2BAA4B,SAACC,GAAD,MAAmB,CAAC7C,KAAK,2BAA2B6C,QAASA,KAG9EC,IA7BQ,WAAkF,IAAjFb,EAAgF,uDAAtD3C,EAAc4C,EAAwC,uCACpG,OAAQA,EAAOlC,MACX,IAAK,cACD,IAAMP,EAAUyC,EAAOjC,YACvB,OAAO,2BACAgC,GADP,IAEIJ,SAAS,GAAD,mBAAMI,EAAMJ,UAAZ,CAAsB,CAACrC,GAAI,EAAGC,QAASA,OAGvD,IAAK,iBACD,OAAO,2BACAwC,GADP,IAEIJ,SAAUI,EAAMJ,SAASO,QAAO,SAAAW,GAAC,OAAEA,EAAEvD,IAAM0C,EAAOS,eAE1D,IAAK,2BACD,OAAO,eACAV,GAGX,QACI,OAAOA,K,iCC/CJ,QAA0B,kC,oBCCzCrD,EAAOC,QAAU,CAAC,WAAa,4B,wGCahBmE,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4ECECQ,EARD,SAACC,GACX,OACI,yCCMOC,EARF,SAACD,GACV,OACI,wCCMOE,EARC,SAACF,GACb,OACI,2C,0CCOJpE,EAAe,CACfuE,QAAS,CACL,CAAErE,GAAI,EAAG+C,KAAM,SAAU7D,IAAI,mFAC7B,CAAEc,GAAI,EAAG+C,KAAM,SAAU7D,IAAK,iFAC9B,CAAEc,GAAI,EAAG+C,KAAM,OAAQ7D,IAAK,0EASrBoF,EALO,WAAgF,IAA/E7B,EAA8E,uDAApD3C,EAE7C,OAAO2C,G,wDChBP3C,EAAe,CACfyE,MAAO,GACPC,SAAU,GACVC,iBAAkB,EAClBC,YAAa,EACbC,YAAY,EACZC,oBAAqB,GACrBhC,OAAQ,CACJiC,KAAM,GACNC,OAAQ,OAkDHzE,EACQ,SAAC0E,GAAD,MAAqB,CAACvE,KAAM,WAAYuE,WADhD1E,EAEM,SAAC0E,GAAD,MAAqB,CAACvE,KAAM,SAAUuE,WAF5C1E,EAGC,SAACkE,GAAD,MAA6B,CAAC/D,KAAM,YAAa+D,UAHlDlE,EAIO,SAACqE,GAAD,MAA0B,CAAClE,KAAM,mBAAoBkE,gBAJ5DrE,EAKE,SAACuC,GAAD,MAAyB,CAACpC,KAAM,aAAcwE,QAASpC,IALzDvC,EAMW,SAAC4E,GAAD,MAAwB,CAACzE,KAAM,kBAAmByE,cAN7D5E,EAOS,SAACsE,GAAD,MAA0B,CAACnE,KAAM,qBAAsBmE,eAPhEtE,EAQkB,SAACsE,EAAqB1D,GAAtB,MAA0C,CAACT,KAAM,+BACxEmE,aACA1D,WAIKiE,EAAW,SAACR,EAAqBF,EAAkB5B,GAC5D,8CAAO,WAAO1B,GAAP,eAAAC,EAAA,6DACHD,EAASb,GAAyB,IAClCa,EAASb,EAAuBqE,IAChCxD,EAASb,EAAkBuC,IAHxB,SAKcxB,IAAS8D,SAASR,EAAaF,EAAU5B,EAAOiC,KAAMjC,EAAOkC,QAL3E,OAKCxD,EALD,OAMHJ,EAASb,GAAyB,IAClCa,EAASb,EAAiBiB,EAAK6D,QAC/BjE,EAASb,EAA2BiB,EAAK8D,aARtC,2CAAP,uDAWEC,EAAc,uCAAG,WAAOnE,EAAkCD,EAAeqE,EAA0DC,GAAlH,SAAApE,EAAA,6DACnBD,EAASb,GAAkC,EAAMY,IAD9B,SAEEqE,EAAUrE,GAFZ,cAGNS,aAAepC,IAAgBqC,SACxCT,EAASqE,EAActE,IAE3BC,EAASb,GAAkC,EAAOY,IAN/B,2CAAH,4DAkBLuE,EA3Fa,WAA+D,IAA9D/C,EAA6D,uDAArD3C,EAAc4C,EAAuC,uCACtF,OAAQA,EAAOlC,MACX,IAAK,SACD,OAAO,2BACAiC,GADP,IAGI8B,MAAO9B,EAAM8B,MAAMkB,KAAI,SAAAC,GACnB,OAAIA,EAAE1F,KAAO0C,EAAOqC,OACT,2BAAIW,GAAX,IAAcC,UAAU,IAErBD,OAGnB,IAAK,WACD,OAAO,2BACAjD,GADP,IAGI8B,MAAO9B,EAAM8B,MAAMkB,KAAI,SAAAC,GACnB,OAAIA,EAAE1F,KAAO0C,EAAOqC,OACT,2BAAIW,GAAX,IAAcC,UAAU,IAErBD,OAGnB,IAAK,YACD,OAAO,2BAAIjD,GAAX,IAAkB8B,MAAO7B,EAAO6B,QACpC,IAAK,mBACD,OAAO,2BAAI9B,GAAX,IAAkBiC,YAAahC,EAAOgC,cAC1C,IAAK,kBACD,OAAO,2BAAIjC,GAAX,IAAkBgC,iBAAkB/B,EAAOuC,YAC/C,IAAK,qBACD,OAAO,2BAAIxC,GAAX,IAAiBkC,WAAYjC,EAAOiC,aACxC,IAAK,aACD,OAAO,2BAAIlC,GAAX,IAAkBG,OAAQF,EAAOsC,UAErC,IAAK,+BACD,OAAO,2BACAvC,GADP,IAEImC,oBAAqBlC,EAAOiC,WAAP,sBACXlC,EAAMmC,qBADK,CACgBlC,EAAOzB,SACtCwB,EAAMmC,oBAAoBhC,QAAO,SAAA5C,GAAE,OAAIA,GAAM0C,EAAOzB,YAElE,QACI,OAAOwB,I,QCjDNmD,EAAU,WAEf,OAAOpG,IAASqG,IAAT,WAA6DlC,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,SAF/EsE,EAAU,SAIbG,EAAeC,GAA8E,IAA5DC,EAA2D,wDAA9BC,EAA8B,uDAAL,KACzF,OAAO1G,IAAS2G,KAAT,aAAgH,CAACJ,QAAOC,WAAUC,aAAYC,YAChJvC,MAAK,SAAAyC,GACF,OAAOA,EAAS9E,SAPnBsE,EAAU,WAWf,OAAOpG,IAAS6G,OAAT,cACF1C,MAAK,SAAAyC,GACF,OAAOA,EAAS9E,SCnBnBgF,EAAc,WAEnB,OAAO9G,IAASqG,IAAT,4BAAoElC,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,SCD/FxB,EAAe,CACfE,GAAI,KACJ+F,MAAO,KACPQ,MAAO,KACPC,QAAQ,EACR7B,YAAY,EACZ8B,WAAY,MAgBHpG,EACY,SAACoG,GAAD,MAAwB,CAACjG,KAAK,0BAA2BwE,QAAS,CAACyB,gBAD/EpG,EAEQ,SAACL,EAAmBuG,EAAsBR,EAAsBS,GAAhE,MAAqF,CAClGhG,KAAM,gBAAiBwE,QAAS,CAAChF,KAAIuG,QAAOR,QAAOS,YAK9CE,EAAmB,yDAAgB,WAAOxF,GAAP,uBAAAC,EAAA,sEACjByE,IADiB,QAChCe,EADgC,QAEzBjF,aAAepC,IAAgBqC,UAAU,EACvBgF,EAAOrF,KAA3BtB,EAD0C,EAC1CA,GAAIuG,EADsC,EACtCA,MAAOR,EAD+B,EAC/BA,MAChB7E,EAASb,EAAwBL,EAAIuG,EAAOR,GAAO,KAJnB,2CAAhB,uDAqBnBa,EAAgB,yDAAiB,WAAO1F,GAAP,iBAAAC,EAAA,sEACnBmF,IADmB,OAChChF,EADgC,OAEhCmF,EAAanF,EAAKuF,IACpB3F,EAASb,EAA6BoG,IAHJ,2CAAjB,uDAgBdK,EA1DY,WAAkE,IAAjErE,EAAgE,uDAAxD3C,EAAc4C,EAA0C,uCACxF,OAAQA,EAAOlC,MACX,IAAK,gBACL,IAAK,0BACD,OAAO,2BACAiC,GACAC,EAAOsC,SAElB,QACI,OAAOvC,I,mBCtBf3C,GAAe,CACfiH,aAAa,GAeJ1G,GACW,iBAAM,CAACG,KAAM,wBAkBtBwG,GA/BW,WAAoF,IAAnFvE,EAAkF,uDAAxD3C,GAAc4C,EAA0C,uCACzG,OAAQA,EAAOlC,MACX,IAAK,sBACD,OAAO,2BACAiC,GADP,IAEIsE,aAAa,IAErB,QACI,OAAOtE,ICLfwE,GAAcC,YAAgB,CAC9BC,YAAa3E,IACb4E,YAAY9D,IACZ+D,WAAW/C,EACXC,MAAMiB,EACNvD,KAAM6E,EACNQ,KAAMC,KACNC,IAAKR,KAcMS,GATHC,YAAYT,GAAaU,YAAgBC,M,4DCVxCC,GAAqC,SAAC,GAQ/C,IAJqF,IAJrCC,EAIoC,EAJpCA,gBACctD,EAGsB,EAHtBA,SAGsB,IAFtBuD,qBAEsB,MAFN,SAAAC,GAAC,OAAIA,GAEC,MADtBtD,mBACsB,MADR,EACQ,MAAtBuD,mBAAsB,MAAR,GAAQ,EAChFC,EAAaC,KAAKC,KAAKN,EAAkBtD,GAEzC6D,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAEf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GAC1C,EAAwCQ,mBAAS,GAAjD,oBAAKC,EAAL,KAAoBC,EAApB,KACIC,GAAyBF,EAAgB,GAAKT,EAAc,EAC5DY,EAAyBH,EAAgBT,EAC7C,OACI,sBAAKa,UAAWC,KAAGC,KAAOC,WAA1B,UACKP,EAAgB,GACjB,wBAAQQ,QAAS,WACbP,EAAiBD,EAAgB,IADrC,kBAGCL,EACIzF,QAAO,SAAAC,GAAC,OAAIA,GAAK+F,GAAyB/F,GAAKgG,KAC/CpD,KAAI,SAAC5C,GACN,OAAO,sBAAMiG,UAAYC,KAAG,gBACvBC,KAAOG,aAAezE,IAAgB7B,IAE9BqG,QAAS,SAACE,GACNrB,EAAclF,IAJxB,SAKUA,OAEpB2F,EAAeE,GAChB,wBAAQQ,QAAS,WACbP,EAAiBD,EAAgB,IADrC,sB,+BC9BCW,GAAM,SAACnF,GAChB,IAAIwB,EAAIxB,EAAMoF,KACd,OACI,8BAEI,gCACQ,iCACI,8BACG,cAAC,IAAD,CAASC,GAAI,YAAc7D,EAAE1F,GAA7B,SACK,qBAAKd,IAAuB,MAAlBwG,EAAE5D,OAAO0H,MAAgB9D,EAAE5D,OAAO0H,MAAQC,KAC/CX,UAAWE,KAAOU,iBAG/B,8BACKhE,EAAEC,SACG,wBAAQgE,SAAUzF,EAAMU,oBAAoBgF,MAAK,SAAA5J,GAAE,OAAIA,IAAO0F,EAAE1F,MACxDkJ,QAAS,WACLhF,EAAM2F,SAASnE,EAAE1F,KAF7B,sBAIA,wBAAQ2J,SAAUzF,EAAMU,oBAAoBgF,MAAK,SAAA5J,GAAE,OAAIA,IAAO0F,EAAE1F,MACxDkJ,QAAS,WACLhF,EAAM4F,OAAOpE,EAAE1F,KAF3B,yBAMlB,iCACQ,iCACI,8BAAM0F,EAAE3C,OACR,8BAAM2C,EAAEtF,YAEZ,iCACI,8BAAM,uBACN,8BAAM,gC,mBCrCrB2J,GAAeC,cAHI,SAACvH,GAC7B,OAJoB,SAACA,GACrB,OAAOA,EAAM8B,MAAMA,MAGZW,CAASzC,GAAOG,QAAQ,SAAA8C,GAAC,OAAG,QAEqB,SAACnB,GACzD,OAAOA,EAAM3B,QAAQ,SAAA8C,GAAC,OAAG,QAEhBuE,GAAsB,SAACxH,GAChC,OAAOA,EAAM8B,MAAMC,UAEV0F,GAA8B,SAACzH,GACxC,OAAOA,EAAM8B,MAAME,kBAEV0F,GAAyB,SAAC1H,GACnC,OAAOA,EAAM8B,MAAMG,aAEV0F,GAAwB,SAAC3H,GAClC,OAAOA,EAAM8B,MAAMI,YAEV0F,GAAiC,SAAC5H,GAC3C,OAAOA,EAAM8B,MAAMK,qBAEV0F,GAAiB,SAAC7H,GAC3B,OAAOA,EAAM8B,MAAM3B,Q,SC2BjB2H,GAA0B,SAACC,GAE7B,MADe,IAeNC,GAAuCzL,IAAMC,MAAK,SAACiF,GAC5D,IAAMtB,EAAS8H,aAAYJ,IAW3B,OAAO,8BACH,cAAC,KAAD,CACIK,oBAAkB,EAClBC,cAAe,CAAC/F,KAAMjC,EAAOiC,KAAMC,OAAQ+F,OAAOjI,EAAOkC,SACzDgG,SAAUP,GACVQ,SAfO,SAACP,EAAD,GAA4F,IAAxEQ,EAAuE,EAAvEA,cACzBpI,EAAqB,CACvBiC,KAAM2F,EAAO3F,KACbC,OAA0B,SAAlB0F,EAAO1F,OAAoB,KAAyB,SAAlB0F,EAAO1F,QAGrDZ,EAAM+G,gBAAgBrI,GACtBoI,GAAc,IAId,SAMK,gBAAEE,EAAF,EAAEA,aAAF,OACG,eAAC,KAAD,WACI,cAAC,KAAD,CAAO1K,KAAK,OAAOuC,KAAK,SAExB,eAAC,KAAD,CAAOA,KAAK,SAASoI,GAAG,SAAxB,UACI,wBAAQxM,MAAM,OAAd,iBACA,wBAAQA,MAAM,OAAd,2BACA,wBAAQA,MAAM,QAAd,gCAEJ,wBAAQ6B,KAAK,SAASmJ,SAAUuB,EAAhC,6B,UClFPE,GAAQ,WAEjB,IAAM7G,EAAQmG,aAAYX,IACpBsB,EAAkBX,aAAYR,IAC9BxF,EAAcgG,aAAYP,IAC1B3F,EAAWkG,aAAYT,IACvBrH,EAAS8H,aAAYJ,IACrBgB,EAAsBZ,aAAYL,IAElCnJ,EAAWqK,eACXC,EAAUC,cAEhBC,qBAAU,WACN,IAAMC,EAASC,SAAkBJ,EAAQK,SAASC,OAAOC,OAAO,IAC5DC,EAAatH,EACbuH,EAAerJ,EAGnB,OAFK+I,EAAOO,OAAMF,EAAaG,OAAOR,EAAOO,OACxCP,EAAO9G,OAAMoH,EAAY,2BAAOA,GAAP,IAAqBpH,KAAM8G,EAAO9G,QACxD8G,EAAO7G,QACX,IAAK,OACDmH,EAAY,2BAAOA,GAAP,IAAqBnH,OAAQ,OACzC,MACJ,IAAK,OACDmH,EAAY,2BAAOA,GAAP,IAAqBnH,QAAQ,IACzC,MACJ,IAAK,QACDmH,EAAY,2BAAOA,GAAP,IAAqBnH,QAAQ,IAGjD5D,EAASgE,EAAS8G,EAAYxH,EAAUyH,MACzC,IACHP,qBAAU,WACN,IAAMU,EAAyB,GAC1BxJ,EAAOiC,OAAMuH,EAAMvH,KAAOjC,EAAOiC,MACjB,OAAlBjC,EAAOkC,SAAiBsH,EAAMtH,OAAS+F,OAAOjI,EAAOkC,SACrC,IAAhBJ,IAAmB0H,EAAMF,KAAOrB,OAAOnG,IAE1C8G,EAAQjD,KAAK,CACT8D,SAAU,SACVP,OAAQF,aAAsBQ,OAEnC,CAACxJ,EAAQ8B,IAEZ,IAMM4H,EAAU,SAACrL,GACbC,EVgCc,SAACD,GACnB,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sEACGkE,EAAenE,EAAUD,EAAQG,IAAS0I,OAAOyC,KAAKnL,KAAUf,GADnE,2CAAP,sDUjCayJ,CAAO7I,KAEduL,EAAY,SAACvL,GACfC,EVkCgB,SAACD,GACrB,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sEACGkE,EAAenE,EAAUD,EAAQG,IAASyI,SAAS0C,KAAKnL,KAAUf,GADrE,2CAAP,sDUnCawJ,CAAS5I,KAEtB,OACI,gCACI,cAACwJ,GAAD,CAAiBQ,gBAXD,SAACrI,GACrB1B,EAASgE,EAAS,EAAGV,EAAU5B,OAYvB2B,EAAMkB,KAAI,SAAAC,GAAC,OAAI,cAAC,GAAD,CAAMd,oBAAqB0G,EACfzB,SAAU2C,EACV1C,OAAQwC,EACRhD,KAAM5D,GACDA,EAAE1F,OAItC,cAAC,GAAD,CAAW0E,YAAaA,EACbqD,cAzBG,SAAC0E,GACnBvL,EAASgE,EAASuH,EAAYjI,EAAU5B,KAyBzB4B,SAAUA,EACVsD,gBAAiBuD,Q,UC5E3BqB,GAA+C,SAACxI,GACzD,IAAMS,EAAa+F,aAAYN,IAC/B,OAAO,qCACH,6BAAKlG,EAAMyI,YACVhI,EAAa,cAAC5F,GAAA,EAAD,IAAe,KAC7B,cAAC,GAAD,Q,iDCwBF6N,GAAiBC,aAA2C,CAACvF,KAAM,SAAlDuF,EAnB6E,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,MAAMtG,EAAgB,EAAhBA,WACtH,OACI,uBAAMsE,SAAU+B,EAAhB,UACI,gCACKE,aAAqC,QAAS,QAAS,CAACtO,MAAWuO,MACnED,aAAqC,WAAY,WAAY,CAACtO,MAAWuO,KAAO,CAACzM,KAAK,aACtFwM,kBAAqCE,EAAW,aAAc,GAAID,KAAO,CAACzM,KAAK,aAE/EiG,GAAc,qBAAKvH,IAAKuH,IACxBA,GAAcuG,aAAqC,qBAAsB,UAAW,CAACtO,MAAWuO,KAAO,OAE3GF,GAAQ,qBAAKjE,UAAWqE,KAAMC,UAAtB,SAAkCL,IAC3C,8BACI,mDAQHM,GAAQ,WACjB,IAAO7G,EAASkE,cAAY,SAACjI,GAAD,OAA6BA,EAAMR,KAAKuE,UAC7DC,EAAaiE,cAAY,SAACjI,GAAD,OAA6BA,EAAMR,KAAKwE,cAClEvF,EAAWqK,eAMjB,OAAI/E,EACO,cAAC,IAAD,CAAU+C,GAAI,aAGrB,gCACI,uCACA,cAACqD,GAAD,CAAgB7B,SAVV,SAACuC,GTHE,IAACvH,EAAeC,EAAkBC,EAAqBC,ESIpEhF,GTJc6E,ESICuH,EAASvH,MTJKC,ESIEsH,EAAStH,STJOC,ESIGqH,EAASrH,WTJSC,ESIGoH,EAASpH,QTHpF,uCAAO,WAAOhF,GAAP,iBAAAC,EAAA,sEACgByE,EAAcG,EAAOC,EAAUC,EAAYC,GAD3D,QACG5E,EADH,QAEMI,aAAepC,IAAgBqC,QACpCT,EAASwF,MAELpF,EAAKI,aAAenC,IAAyBgO,mBAC7CrM,EAAS0F,KAET3G,EAAUqB,EAAKe,SAASvD,OAAS,EAAIwC,EAAKe,SAAS,GAAK,aAC5DnB,EAASiB,YAAW,QAAS,CAACC,OAAQnC,MATvC,2CAAP,yDSY4CwG,WAAYA,QCtDrD,SAAS+G,GAAkBC,GAC9B,OAAO,SAACvJ,GACJ,OAAO,cAAC,IAAMwJ,SAAP,CAAgBC,SAAU,6CAA1B,SACH,cAACF,EAAD,eAAsBvJ,O,wGCJrB0J,GAAe,SAACnL,GACzB,OAAOA,EAAMR,KAAKuE,QAETqH,GAAmB,SAACpL,GAC7B,OAAOA,EAAMR,KAAKsE,OCyDPuH,GArDA9O,IAAMC,MAAK,WACtB,IAAO6O,EAAUC,KAAVD,OAEDtH,EAASkE,aAAYkD,IACrBrH,EAAQmE,aAAYmD,IACpB3M,EAAWqK,eAMjB,OACI,eAACuC,EAAD,CAAQhF,UAAU,SAAlB,UACI,qBAAKA,UAAU,SACf,eAAC,KAAD,WACI,cAAC,KAAD,CAAKkF,KAAM,GAAX,SACI,cAAC,KAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAA3D,SACI,cAAC,KAAKC,KAAN,UAAmB,cAAC,IAAD,CAAM7E,GAAG,SAAT,oBAAJ,SAGtB/C,EACK,yCAAG,cAAC,KAAD,CAAKwH,KAAM,EAAX,SACD,cAAC,KAAD,CAAQb,MAAO,CAACkB,gBAAiB,WAAYC,KAAM,cAACC,GAAA,EAAD,QAEnD,eAAC,KAAD,CAAKP,KAAM,EAAX,UACKzH,EADL,IACY,cAAC,KAAD,CAAQ2C,QAjBjB,WACnBhI,EZ+CJ,uCAAO,WAAOA,GAAP,SAAAC,EAAA,sEACgByE,IADhB,cAEMlE,aAAepC,IAAgBqC,SACpCT,EAASb,EAAwB,KAAM,KAAM,MAAM,IAHpD,2CAAP,wDY/BgC,0BAGd,cAAC,KAAD,CAAK2N,KAAM,EAAX,SACE,cAAC,KAAD,UACI,cAAC,IAAD,CAAMzE,GAAI,SAAV,gCCnBpBiF,GAAYC,KAAZD,QACDE,GAA2BX,KAA3BW,QAASC,GAAkBZ,KAAlBY,OAAQC,GAAUb,KAAVa,MAElBC,GAAmB7P,IAAM8P,MAAK,kBAAI,iCAClCC,GAAmB/P,IAAM8P,MAAK,kBAAI,iCAElCE,GAAmBxB,GAAaqB,IAChCI,GAAmBzB,GAAauB,IAEhCG,G,4MACJC,wBAA0B,SAAC/F,GACzBgG,MAAM,uB,uDAGR,WACEC,KAAKnL,MAAMoL,iBACXC,OAAOC,iBAAiB,qBAAsBH,KAAKF,2B,kCAGrD,WACEI,OAAOE,oBAAoB,qBAAsBJ,KAAKF,2B,oBAGxD,WACE,OAAKE,KAAKnL,MAAM6C,YAGT,cAAC,IAAD,UACL,eAAC,KAAD,WACE,cAAC,GAAD,IACA,eAAC2H,GAAD,CAASvB,MAAO,CAAEuC,QAAS,UAA3B,UACE,eAAC,KAAD,CAAYvC,MAAO,CAAEwC,OAAQ,UAA7B,UACE,cAAC,KAAWvB,KAAZ,mBACA,cAAC,KAAWA,KAAZ,mBACA,cAAC,KAAWA,KAAZ,qBAEF,eAAC,KAAD,CAAQtF,UAAU,yBAAyBqE,MAAO,CAAEuC,QAAS,UAA7D,UACE,cAACd,GAAD,CAAO9F,UAAU,yBAAyB8G,MAAO,IAAjD,SACE,eAAC,KAAD,CACI1B,KAAK,SACLC,oBAAqB,CAAC,KAEtBhB,MAAO,CAAE0C,OAAQ,QAJrB,UAME,eAACrB,GAAD,CAAoBF,KAAM,cAACC,GAAA,EAAD,IAAkBuB,MAAM,aAAlD,UACE,cAAC,KAAK1B,KAAN,UAAmB,cAAC,IAAD,CAAM7E,GAAG,WAAT,sBAAJ,KACf,cAAC,KAAK6E,KAAN,UAAmB,cAAC,IAAD,CAAM7E,GAAG,WAAT,sBAAJ,KACf,cAAC,KAAK6E,KAAN,qBAAe,KACf,cAAC,KAAKA,KAAN,qBAAe,OAJJ,QAMb,eAACI,GAAD,CAAoBF,KAAM,cAACyB,GAAA,EAAD,IAAoBD,MAAM,aAApD,UACE,cAAC,KAAK1B,KAAN,UAAmB,cAAC,IAAD,CAAM7E,GAAG,SAAT,oBAAJ,KACf,cAAC,KAAK6E,KAAN,qBAAe,KACf,cAAC,KAAKA,KAAN,qBAAe,KACf,cAAC,KAAKA,KAAN,qBAAe,OAJJ,QAMb,eAACI,GAAD,CAAoBF,KAAM,cAAC0B,GAAA,EAAD,IAA0BF,MAAM,WAA1D,UACE,cAAC,KAAK1B,KAAN,qBAAe,KACf,cAAC,KAAKA,KAAN,sBAAe,MACf,cAAC,KAAKA,KAAN,sBAAe,MACf,cAAC,KAAKA,KAAN,sBAAe,QAJJ,aAQjB,eAACM,GAAD,CAASvB,MAAO,CAAEuC,QAAS,SAAUO,UAAW,KAAhD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAU5G,GAAI,gBAC5C,cAAC,IAAD,CAAO2G,KAAK,oBAAoBC,OAAQ,kBAAM,cAAClB,GAAD,OAC9C,cAAC,IAAD,CAAOiB,KAAK,WAAWC,OAAQ,kBAAM,cAACnB,GAAD,OACrC,cAAC,IAAD,CAAOkB,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,CAAgBxD,UAAW,gFAC9D,cAAC,IAAD,CAAOuD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAM,cAAC,EAAD,OAClC,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,cAAC,EAAD,gBAG3C,cAACxB,GAAD,CAAQxB,MAAO,CAAEiD,UAAW,UAA5B,0CAlDK,cAACrR,GAAA,EAAD,Q,GAhBKC,IAAMqR,WAmGpBC,GAAWC,YACXC,IACAC,cAPmB,SAAChO,GAAD,MAAqD,CAC1EsE,YAAYtE,EAAM+E,IAAIT,YACtB2J,eAAgBjO,EAAM4E,cAKI,CAACiI,eZ5GC,kBAAM,SAACpO,GAC7B,IAAIyP,EAAUzP,EAASwF,KACvBpE,QAAQsO,IAAI,CAACD,IACRhN,MAAK,WACFzC,EAASb,SAEZwQ,OAAM,SAACzH,GAEJ0H,QAAQC,IAAI3H,MAEf4H,SAAQ,mBYgGNT,CAEgCrB,IAUhC+B,GARgB,WAC7B,OAAO,cAAC,IAAD,CAAeC,SAAUC,sBAAzB,SACL,cAAC,KAAD,CAAU1J,MAAOA,GAAjB,SACE,cAAC6I,GAAD,SCjIFc,IAASjB,OAAO,cAAC,GAAD,IAAkBkB,SAASC,eAAe,SAU9D9N,K,kMCPa+N,EAA8C,SAAC,GAAqC,IAAD,IAAnCC,KAAMC,EAA6B,EAA7BA,QAAS1E,EAAoB,EAApBA,MAAQ2E,EAAY,EAAZA,SAE1EC,EAAWF,GAAW1E,EAE5B,OAAO,sBAAKjE,UAAWE,IAAO4I,YAAc,KAAOD,EAAU3I,IAAO+D,MAAQ,IAArE,UACH,8BACK2E,IAEHC,GAAY,+BAAO5E,QAGhB8E,EAAwC,SAAC3N,GAElD,IAAO4N,EAA6B5N,EAA7B4N,MAAgBC,GAAa7N,EAAtBsN,KAAd,YAAoCtN,EAApC,mBACA,OAAO,cAACqN,EAAD,2BAAiBrN,GAAjB,aAAwB,oDAAc4N,GAAWC,QAG/C9E,EAAqC,SAAC/I,GAE/C,IAAO4N,EAA6B5N,EAA7B4N,MAAgBC,GAAa7N,EAAtBsN,KAAd,YAAoCtN,EAApC,mBACA,OAAO,cAACqN,EAAD,2BAAiBrN,GAAjB,aAAwB,iDAAW4N,GAAWC,QAElD,SAAS/E,EAAyCgF,EACAjP,EACAkP,EACAC,GACwB,IAAxBhO,EAAuB,uDAAf,GAAIiO,EAAW,uDAAJ,GACxE,OAAO,gCACH,cAAC,IAAD,aAAOH,YAAaA,EAAajP,KAAMA,EAChC+H,SAAUmH,EACVC,UAAWA,GACPhO,IAJR,IAKCiO,O,gCC1CZ,sDAIa/Q,EAAW,CACpB8D,SADoB,WACwE,IAAnFR,EAAkF,uDAApE,EAAGF,EAAiE,uDAAtD,GAAIK,EAAkD,uDAAnC,GAAIC,EAA+B,uDAAN,KACjF,OAAOtF,IAASqG,IAAkB,qBAAcnB,EAAd,kBAAmCF,EAAnC,iBAAoDK,IAAqB,OAAXC,EAAkB,GAAlB,kBAAkCA,KAC7HnB,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,SAEzBuI,SALoB,SAKX7J,GACL,OAAOR,IAAS6G,OAAT,iBAA0BrG,IAC5B2D,MAAK,SAAAyC,GACF,OAAOA,EAAS9E,SAG5BwI,OAXoB,SAWb9J,GACH,OAAOR,IAAS2G,KAAT,iBAAyCnG,IAC3C2D,MAAK,SAAAyC,GACF,OAAOA,EAAS9E,SAG5BD,WAjBoB,SAiBTJ,GACP,OAAOO,IAAWH,WAAWJ,M,gCCrBrC,8CAMaO,EAAa,CACtBH,WADsB,SACXJ,GACP,OAAOzB,IAASqG,IAAiB,WAAa5E,GAAQ0C,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,SAE1EC,UAJsB,SAIZN,GACN,OAAOzB,IAASqG,IAAY,kBAAoB5E,GAAQ0C,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,SAE5EG,aAPsB,SAOTrB,GACT,OAAOZ,IAAS4S,IAAT,kBAAiD,CAAChS,WAASuD,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,SAEtFM,UAVsB,SAUZC,GACN,IAAMyL,EAAW,IAAI+E,SAErB,OADA/E,EAASgF,OAAO,QAASzQ,GAClBrC,IAAS4S,IAAT,gBAA0E9E,EAAU,CACvFzN,QAAS,CACL,eAAgB,yBAErB8D,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,SAEvBS,YAnBsB,SAmBV5B,GACR,OAAOX,IAAS4S,IAAT,UAAyCjS,GAASwD,MAAK,SAAAmC,GAAG,OAAIA,EAAIxE,W,mBC1BjFlC,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,UAAY,oC","file":"static/js/main.77eb8dda.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) =>{\r\n    if(!!value)return undefined\r\n\r\n    return 'Filed is required'\r\n}\r\nexport const maxLengthCreator =(maxLength:number): FieldValidatorType=>(value) =>{\r\n        if(value && value.length > 30)return `Max length is ${maxLength} symbols`\r\n        return undefined;\r\n    }","export default __webpack_public_path__ + \"static/media/loader.c2493588.gif\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.gif\";\r\n\r\nconst Preloader = React.memo(()=>{\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n})\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageBlock\":\"Paginator_pageBlock__1H8JD\",\"selectedPage\":\"Paginator_selectedPage__49Bpj\"};","import * as axios from \"axios\";\r\nimport {UserType} from \"../redux/types/types\";\r\n\r\nexport const instance = axios.default.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"07c457bc-e742-4380-afc8-e78bc10fd120\"\r\n    }\r\n})\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCapcthaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n\r\n","import {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, ProfileType} from \"./types/types\";\r\nimport {UsersAPI} from \"../api/users-api\";\r\nimport {ProfileAPI} from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nexport let initialState = {\r\n    posts: [\r\n        {id: 1,message: \"Hello, It is my first massage\", likeCounts: 15},\r\n        {id: 2, message: \"Hello, I am Lesha\", likeCounts: 30},\r\n    ] as Array<PostType>,\r\n    profile:{\r\n        \"aboutMe\": \"я круто чувак 1001%\",\r\n        \"contacts\": {\r\n            \"facebook\": \"facebook.com\",\r\n            \"website\": '',\r\n            \"vk\": \"vk.com/dimych\",\r\n            \"twitter\": \"https://twitter.com/@sdf\",\r\n            \"instagram\": \"instagra.com/sds\",\r\n            \"youtube\": '',\r\n            \"github\": \"github.com\",\r\n            \"mainLink\": ''\r\n        },\r\n        \"lookingForAJob\": true,\r\n        \"lookingForAJobDescription\": \"не ищу, а дурачусь!!!\",\r\n        \"fullName\": \"samurai dimych\",\r\n        \"userId\": 2,\r\n        \"photos\": {\r\n            \"small\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\r\n            \"large\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\r\n        }\r\n    } as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            const newPost = action.postMessage\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 8, message: newPost, likeCounts: 0}]\r\n        }}\r\n        case \"REMOVE-POST\":\r\n            return {\r\n            ...state,\r\n            posts: state.posts.filter(p=> p.id != action.postId)\r\n        }\r\n        case \"SET_USER_PROFILE\":{\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SAVE_PHOTO_SUCCESS\":{\r\n            return {...state, profile:{...state.profile, photos: action.photo}as ProfileType}\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostAC: (postText: string) => ({type: 'ADD-POST',postMessage: postText} as const),\r\n    deletePostAC: (postId: number) => ({type: 'REMOVE-POST',postId} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SET_USER_PROFILE',profile} as const),\r\n    setStatus: (status: string) => ({type: 'SET_STATUS',status} as const),\r\n    savePhotoSuccess: (photo: PhotosType) =>({type: 'SAVE_PHOTO_SUCCESS',photo} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null):ThunkType =>async (dispatch)=> {\r\n    const data = await UsersAPI.getProfile(userId)\r\n        dispatch(actions.setUserProfile(data))\r\n}\r\nexport const getStatus = (userId: number | null):ThunkType =>async (dispatch)=> {\r\n     const data = await ProfileAPI.getStatus(userId)\r\n        dispatch(actions.setStatus(data))\r\n}\r\nexport const updateStatus = (status: string):ThunkType => async (dispatch)=> {\r\n    try {\r\n        const data = await ProfileAPI.updateStatus(status)\r\n        if(data.resultCode === ResultCodesEnum.Success){\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch (error){\r\n\r\n    }\r\n}\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch)=> {\r\n    let data = await ProfileAPI.savePhoto(file)\r\n            if(data.resultCode === ResultCodesEnum.Success){\r\n                dispatch(actions.savePhotoSuccess(data.data.photos))\r\n            }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState)=> {\r\n    const userId = getState().auth.id\r\n    const data = await ProfileAPI.saveProfile(profile)\r\n    if(data.resultCode === ResultCodesEnum.Success){\r\n        if(userId != null){\r\n        dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\ntype messageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype dialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    messages: [\r\n        { id: 1, message: \"Hi\"},\r\n        { id: 2, message: \"I am here\"},\r\n        { id: 3, message: \"bye\"},\r\n    ] as Array<messageType>,\r\n    dialogs: [\r\n        { id: 1, name: \"Alex\"},\r\n        { id: 2, name: \"Victor\"},\r\n        { id: 3, name: \"Sasha\"},\r\n        { id: 4, name: \"Mike\"},\r\n        { id: 5, name: \"Bob\"},\r\n    ] as Array<dialogsType>\r\n}\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType=>{\r\n    switch (action.type){\r\n        case \"ADD-MESSAGE\":{\r\n            const message = action.postMessage\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: message}]\r\n            }\r\n        }\r\n        case \"REMOVE-MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m=>m.id != action.messageId)\r\n            }\r\n        case \"UPDATE-YOUR-MESSAGE-TEXT\":{\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const actions = {\r\n    addMessageAC: (messageText:string)=>({type:'ADD-MESSAGE', postMessage: messageText}as const),\r\n    removeMessageAC:(messageId:number)=>({type:'REMOVE-MESSAGE',messageId}as const),\r\n    changeNewMessageTextCreate: (newText:string)=>({type:'UPDATE-YOUR-MESSAGE-TEXT',newText: newText}as const)\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","export default __webpack_public_path__ + \"static/media/user.ab7efdc7.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersPhoto\":\"users_UsersPhoto__3Y8x7\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport classes from './Music.module.css'\r\n\r\nconst Music = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react'\r\nimport classes from './News.module.css'\r\n\r\nconst News = (props: any) =>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react'\r\nimport classes from './Setting.module.css'\r\n\r\nconst Setting = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Setting;","\r\nexport type friendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type ActionType ={}\r\nexport type initialStateType = {\r\n    friends: Array<friendType>\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        { id: 1, name: 'Kirill', src:\"https://cdni.rt.com/russian/images/2019.03/article/5c99e32a18356130668b45a2.JPG\"},\r\n        { id: 2, name: \"Peeter\", src: \"https://vokrug-tv.ru/pic/person/2/2/d/b/22db573c1118bc091c4267e15258d8ce.jpeg\"},\r\n        { id: 3, name: \"Vlad\", src: \"https://upload.wikimedia.org/wikipedia/ru/4/4e/Patrick_star-4854.jpg\"},\r\n    ],\r\n}\r\n\r\nconst navbarReducer = (state: initialStateType = initialState, action: ActionType):initialStateType=>{\r\n\r\n    return state\r\n}\r\n\r\nexport default navbarReducer","import {Dispatch} from \"redux\";\r\nimport {APIResponseType, ResultCodesEnum} from \"../api/api\";\r\nimport {UserType} from \"./types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {UsersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCounts: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingIsProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET_USERS\":\r\n            return {...state, users: action.users}\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"SET_TOTAL_COUNT\":\r\n            return {...state, totalUsersCounts: action.totalPage}\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state,isFetching: action.isFetching}\r\n        case 'SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingIsProgress: action.isFetching\r\n                    ? [...state.followingIsProgress, action.userId]\r\n                    : state.followingIsProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    unfollowSuccess: (userID: number) => ({type: \"UNFOLLOW\", userID} as const),\r\n    followSuccess: (userID: number) => ({type: \"FOLLOW\", userID} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: \"SET_USERS\", users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: \"SET_CURRENT_PAGE\", currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalPage: number) => ({type: \"SET_TOTAL_COUNT\", totalPage} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"TOGGLE_IS_FETCHING\", isFetching} as const),\r\n    toggleFollowingIsProgress: (isFetching: boolean, userId: number) => ({type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await UsersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch<ActionsTypes>, userId: number,apiMethod:  (userId: number) => Promise<APIResponseType>, actionCreator: (userId: number) => ActionsTypes )=>{\r\n    dispatch(actions.toggleFollowingIsProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingIsProgress(false, userId))\r\n}\r\nexport const follow = (userId: number):ThunkType => {\r\n    return async (dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.follow.bind(UsersAPI),actions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number):ThunkType => {\r\n    return async (dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.unfollow.bind(UsersAPI),actions.unfollowSuccess)\r\n    }\r\n}\r\nexport default usersReducer\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import {APIResponseType, instance, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null){\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\n","import {instance} from \"./api\";\r\n\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}\r\n\r\n\r\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport { securityAPI } from \"../api/security-api\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    isFetching: false,\r\n    captchaUrl: null as string | null // if null, then captcha is not required\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    getCaptchaUrlSuccess:(captchaUrl: string )=>({type:'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}}as const),\r\n    setAuthUserData: (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\", payload: {id, login, email, isAuth}\r\n    } as const)\r\n}\r\n\r\n\r\nexport const getAuthUsersData = (): ThunkType =>async (dispatch) => {\r\n            let meData = await authAPI.me();\r\n            if (meData.resultCode === ResultCodesEnum.Success) {\r\n                let {id, login, email} = meData.data\r\n                dispatch(actions.setAuthUserData(id, login, email, true))\r\n            }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUsersData())\r\n        }else {\r\n            if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n        const data = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = data.url\r\n            dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n    }\r\n\r\n\r\nexport const logout = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await authAPI.logout()\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {InferActionsTypes} from \"./redux-store\";\r\nimport {getAuthUsersData} from \"./auth-reducer\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: ()=> ({type: \"INITIALIZED_SUCCESS\"} as const)\r\n}\r\n\r\nexport const initializedApp = () => (dispatch: any) => {\r\n        let promise = dispatch(getAuthUsersData());\r\n        Promise.all([promise])\r\n            .then(()=>{\r\n                dispatch(actions.initializedSuccess())\r\n            })\r\n            .catch((e) => {\r\n                //go fo pizza\r\n                console.log(e)\r\n            })\r\n            .finally(() => {\r\n                //dispatch(initializedSuccess(error))\r\n            })\r\n}\r\n\r\nexport default appReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","import {Action, AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarPage:navbarReducer,\r\n    users:usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type RootReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type StoreReduxType = typeof store\r\n\r\nexport type AppThunk <ReturnType = void> = ThunkAction<ReturnType, RootReduxStateType, unknown, AnyAction>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, RootReduxStateType, unknown, A>\r\n\r\nexport default store","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames'\r\n\r\ntype PaginatorType = {\r\n    pageSize: number\r\n    portionSize?: number\r\n    totalItemCounts: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({totalItemCounts,\r\n                                                                  pageSize,\r\n                                                                  onPageChanged = x => x,\r\n                                                                  currentPage = 1,\r\n                                                                  portionSize = 15}) => {\r\n    let pagesCount = Math.ceil(totalItemCounts / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n     }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    return (\r\n        <div className={cn(styles.pageBlock)}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }) }\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport styles from \"./users.module.css\";\r\nimport {UserType} from \"../../redux/types/types\";\r\n\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    followingIsProgress: Array<number>\r\n}\r\n\r\nexport const User =(props: UserPropsType) => {\r\n    let u = props.user;\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                    <span>\r\n                        <div>\r\n                           <NavLink to={'/profile/' + u.id}>\r\n                                <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                     className={styles.UsersPhoto}/>\r\n                           </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}>Unfollow</button>\r\n                                : <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.follow(u.id)\r\n                                          }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                <span>\r\n                        <span>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import { createSelector } from \"reselect\";\r\nimport {RootReduxStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: RootReduxStateType)=> {\r\n    return state.users.users;\r\n}\r\nexport const getUsersSelector = (state: RootReduxStateType)=>{\r\n    return getUsers(state).filter( u=> true);\r\n}\r\nexport const getUserSuper = createSelector(getUsersSelector,(users) =>{\r\n    return users.filter( u=> true);\r\n})\r\nexport const getPageSizeSelector = (state: RootReduxStateType)=>{\r\n    return state.users.pageSize;\r\n}\r\nexport const getTotalUsersCountsSelector = (state: RootReduxStateType)=>{\r\n    return state.users.totalUsersCounts;\r\n}\r\nexport const getCurrentPageSelector = (state: RootReduxStateType)=>{\r\n    return state.users.currentPage;\r\n}\r\nexport const getIsFetchingSelector = (state: RootReduxStateType)=>{\r\n    return state.users.isFetching;\r\n}\r\nexport const getFollowingIsProgressSelector = (state: RootReduxStateType)=>{\r\n    return state.users.followingIsProgress;\r\n}\r\nexport const getUsersFilter = (state: RootReduxStateType) => {\r\n    return state.users.filter;\r\n}","import {FilterType} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\n// const usersSearchFormValidate = (values: any) => {\r\n//     const errors = {}\r\n//     return errors\r\n// }\r\n// type FriendFormType = 'true' | 'false' | 'null'\r\n// type FormType = {\r\n//     term: string\r\n//     friend: 'true' | 'false' | 'null'\r\n// }\r\n// type PropsType = {\r\n//     onFilterChanged: (filter: FilterType) => void\r\n// }\r\n// export const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n//     const filter = useSelector(getUsersFilter)\r\n//     const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n//         const filter: FilterType = {\r\n//             term: values.term,\r\n//             friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n//         }\r\n//\r\n//         props.onFilterChanged(filter)\r\n//         setSubmitting(false)\r\n//     }\r\n//\r\n//     return <div>\r\n//         <Formik\r\n//             enableReinitialize\r\n//             initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n//             validate={usersSearchFormValidate}\r\n//             onSubmit={submit}\r\n//         >\r\n//             {({isSubmitting}) => (\r\n//                 <Form>\r\n//                     <Field type=\"text\" name=\"term\"/>\r\n//\r\n//                     <Field name=\"friend\" as=\"select\">\r\n//                         <option value=\"null\">All</option>\r\n//                         <option value=\"true\">Only followed</option>\r\n//                         <option value=\"false\">Only unfollowed</option>\r\n//                     </Field>\r\n//                     <button type=\"submit\" disabled={isSubmitting}>\r\n//                         Find\r\n//                     </button>\r\n//                 </Form>\r\n//             )}\r\n//         </Formik>\r\n//     </div>\r\n// })\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","import React, {useEffect} from \"react\";\r\nimport {Paginator} from \"../Common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\nimport {FilterType, follow, getUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPageSelector, getFollowingIsProgressSelector,\r\n    getPageSizeSelector,\r\n    getTotalUsersCountsSelector,\r\n    getUsersFilter, getUserSuper\r\n} from \"../../redux/users-selectors\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\n\r\nexport const Users = () => {\r\n\r\n    const users = useSelector(getUserSuper)\r\n    const totalUsersCount = useSelector(getTotalUsersCountsSelector)\r\n    const currentPage = useSelector(getCurrentPageSelector)\r\n    const pageSize = useSelector(getPageSizeSelector)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingIsProgressSelector)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend){\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsers(1, pageSize, filter))\r\n    }\r\n    const followU = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollowU = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n            {\r\n                users.map(u => <User followingIsProgress={followingInProgress}\r\n                                           unfollow={unfollowU}\r\n                                           follow={followU}\r\n                                           user={u}\r\n                                           key={u.id}\r\n                />)\r\n            }\r\n\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       pageSize={pageSize}\r\n                       totalItemCounts={totalUsersCount}  />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsFetchingSelector} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersContainer: React.FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetchingSelector)\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport style from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    captcha: string\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error,captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", 'email', [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", 'password', [required], Input, {type:'password'})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type:'checkbox'})}\r\n\r\n                {captchaUrl && <img src={captchaUrl}/>}\r\n                {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", 'captcha', [required], Input, {})}\r\n            </div>\r\n            {error &&<div className={style.someError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport const Login = () => {\r\n    const  isAuth = useSelector((state:RootReduxStateType)=> state.auth.isAuth)\r\n    const  captchaUrl = useSelector((state:RootReduxStateType)=> state.auth.captchaUrl)\r\n    const dispatch = useDispatch()\r\n\r\n    let onSubmit =(formData: FormDataType)=>{\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import {RootReduxStateType} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state:RootReduxStateType)=>{\r\n    return state.auth.isAuth\r\n}\r\nexport const selectUserCurrent =(state: RootReduxStateType)=>{\r\n    return state.auth.login\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {selectIsAuth, selectUserCurrent} from \"../../redux/auth-selector\";\r\n\r\n\r\nconst Header = React.memo(() => {\r\n    const {Header} = Layout;\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectUserCurrent)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <Header className=\"header\">\r\n            <div className=\"logo\"/>\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"><Link to=\"/users\">Users</Link></Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ? <> <Col span={2}>\r\n                        <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                    </Col>\r\n                        <Col span={4}>\r\n                            {login} <Button onClick={logoutCallback}>logout</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={6}>\r\n                        <Button>\r\n                            <Link to={'/login'}>Login</Link>\r\n                        </Button>\r\n                    </Col>}\r\n            </Row>\r\n        </Header>\r\n\r\n\r\n\r\n\r\n\r\n        // <header className={classes.header}>\r\n        //     <img\r\n        //         src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Logo_TV_2015.svg/1200px-Logo_TV_2015.svg.png\"\r\n        //         alt=\"logo\"/>\r\n        //\r\n        //     <div className={classes.loginBlock}>\r\n        //         {props.isAuth\r\n        //             ? <div>{props.login} - <button onClick={logoutCallback}>logout</button></div>\r\n        //             : <NavLink to={'/login'}>Login</NavLink>}\r\n        //     </div>\r\n        // </header>\r\n    );\r\n})\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport Music from './components/Music/Music';\r\nimport News from './components/News/News';\r\nimport Setting from './components/Setting/Setting';\r\nimport {BrowserRouter, Link, Redirect, Route, withRouter} from \"react-router-dom\";\r\nimport store, {RootReduxStateType} from \"./redux/redux-store\";\r\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\r\nimport {Login} from './components/Login/Login';\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializedApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {initialStateType} from \"./redux/navbar-reducer\";\r\nimport {Breadcrumb, Layout, Menu} from \"antd\";\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\r\nimport Header from \"./components/Header/Header\";\r\n\r\n\r\nconst { SubMenu } = Menu;\r\nconst {Content, Footer, Sider } = Layout;\r\n\r\nconst DialogsContainer = React.lazy(()=>import (\"./components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(()=>import (\"./components/Profile/ProfileContainer\"));\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\nclass App extends React.Component<mapStateToPropsType & mapDispatchToPropsType> {\r\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    alert('Some error occured')\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.initializedApp()\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n    return <BrowserRouter>\r\n      <Layout>\r\n        <Header />\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <Breadcrumb style={{ margin: '16px 0' }}>\r\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\r\n            <Sider className=\"site-layout-background\" width={200}>\r\n              <Menu\r\n                  mode=\"inline\"\r\n                  defaultSelectedKeys={['1']}\r\n                  // defaultOpenKeys={['sub1']}\r\n                  style={{ height: '100%' }}\r\n              >\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\r\n                  <Menu.Item key=\"1\"><Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                  <Menu.Item key=\"2\"><Link to=\"/dialogs\">Massage</Link></Menu.Item>\r\n                  <Menu.Item key=\"3\">option3</Menu.Item>\r\n                  <Menu.Item key=\"4\">option4</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\r\n                  <Menu.Item key=\"5\"><Link to=\"/users\" >Users</Link></Menu.Item>\r\n                  <Menu.Item key=\"6\">option6</Menu.Item>\r\n                  <Menu.Item key=\"7\">option7</Menu.Item>\r\n                  <Menu.Item key=\"8\">option8</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\r\n                  <Menu.Item key=\"9\">option9</Menu.Item>\r\n                  <Menu.Item key=\"10\">option10</Menu.Item>\r\n                  <Menu.Item key=\"11\">option11</Menu.Item>\r\n                  <Menu.Item key=\"12\">option12</Menu.Item>\r\n                </SubMenu>\r\n              </Menu>\r\n            </Sider>\r\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n              <Route path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n              <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n              <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n              <Route path='/users' render={() => <UsersContainer pageTitle={'Пользователи'} />}/>\r\n              <Route path='/login' render={() => <Login/>}/>\r\n              <Route path='/music' render={() => <Music/>}/>\r\n              <Route path='/news' render={() => <News/>}/>\r\n              <Route path='/setting' render={() => <Setting/>}/></Content>\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>Social Network ©2021</Footer>\r\n      </Layout>\r\n      {/*<div className=\"app-wrapper\">*/}\r\n      {/*  <HeaderContainer />*/}\r\n      {/*  <Navbar state={this.props.stateForNavbar}/>*/}\r\n      {/*  <div className=\"app-wrapper-content\">*/}\r\n      {/*    <Route path='/' render={() => <Redirect to={'/profile'}/>}/>*/}\r\n      {/*    <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>*/}\r\n      {/*    <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>*/}\r\n      {/*    <Route path='/users' render={() => <UsersContainer pageTitle={'Пользователи'} />}/>*/}\r\n      {/*    <Route path='/login' render={() => <Login/>}/>*/}\r\n      {/*    <Route path='/music' render={() => <Music/>}/>*/}\r\n      {/*    <Route path='/news' render={() => <News/>}/>*/}\r\n      {/*    <Route path='/setting' render={() => <Setting/>}/>*/}\r\n      {/*  </div>*/}\r\n      {/*</div>*/}\r\n    </BrowserRouter>;\r\n  }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  initialized: boolean\r\n  stateForNavbar: initialStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n  initializedApp:()=>void\r\n}\r\n\r\nconst mapStateToProps =(state: RootReduxStateType): mapStateToPropsType => ({\r\n  initialized:state.app.initialized,\r\n  stateForNavbar: state.navbarPage\r\n})\r\n\r\nlet AppClass = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps,{initializedApp}))(App);\r\n\r\nconst AppContainer: React.FC = () => {\r\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n      <AppClass />\r\n    </Provider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default AppContainer\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport AppContainer from \"./App\";\r\n\r\n\r\n    ReactDOM.render(<AppContainer />, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\nimport  {WrappedFieldMetaProps, WrappedFieldProps, Field} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta:{touched, error}, children})=>{\r\n\r\n    const hasError = touched && error;\r\n\r\n    return <div className={styles.formControl + ' ' + (hasError ?styles.error : '')}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        { hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import {APIResponseType, GetItemsType, instance} from \"./api\";\r\nimport {ProfileAPI} from \"./profile-api\";\r\n\r\n\r\nexport const UsersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    unfollow(id: number | null) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            }) as Promise<APIResponseType>\r\n    },\r\n    follow(id: number | null) {\r\n        return instance.post<APIResponseType>(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfile(userId: number | null) {\r\n        return ProfileAPI.getProfile(userId)\r\n    }\r\n}\r\n","import {PhotosType, ProfileType, UserType} from \"../redux/types/types\";\r\nimport {APIResponseType, instance} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status}).then(res => res.data)\r\n    },\r\n    savePhoto(file: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', file)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3ioei\",\"error\":\"FormsControls_error__3p3c6\",\"someError\":\"FormsControls_someError__3vEc_\"};"],"sourceRoot":""}