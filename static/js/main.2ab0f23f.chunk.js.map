{"version":3,"sources":["redux/dialogs-reducer.tsx","components/Navbar/Navbar.module.css","components/Users/users.module.css","api/api.ts","reportWebVitals.ts","components/Navbar/Friends/Friend/Friend.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Setting/Setting.tsx","redux/navbar-reducer.tsx","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.module.css","components/Common/FormsControls/FormsControls.tsx","assets/images/loader.gif","components/Common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/Common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.tsx"],"names":["initialState","messages","id","message","dialogs","name","addMessageAC","messageText","type","postMessage","dialogsReducer","state","action","filter","m","messageId","module","exports","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","getUsers","currentPage","pageSize","get","then","response","data","unfollow","delete","follow","post","getProfile","userId","ProfileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Friends","React","memo","props","path","src","to","friendsElements","friends","map","d","Friend","className","classes","blockFriends","Navbar","nav","item","activeClassName","activLink","Music","News","Setting","navbarReducer","unfollowSuccess","userID","followSuccess","setCurrentPage","toggleIsFetching","isFetching","toggleFollowingIsProgress","users","totalUsersCounts","followingIsProgress","followUnfollow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","u","followed","totalPage","setAuthUserData","isAuth","payload","getAuthUsersData","res","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","navbarPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Paginator","totalItemCounts","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","pageBlock","onClick","p","selectedPage","e","User","user","photos","small","userPhoto","UsersPhoto","disabled","some","Users","pageCount","getUsersSelector","getPageSizeSelector","createSelector","getTotalUsersCountsSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingIsProgressSelector","UsersAPIComponent","pageNumber","this","Preloader","Component","compose","connect","bind","items","totalCount","Header","useDispatch","header","alt","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","Input","placeholder","validate","required","error","style","someError","Login","useSelector","formData","length","stopSubmit","_error","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","initializedApp","stateForNavbar","render","UsersContainer","AppClass","withRouter","promise","Promise","all","AppContainer","basename","process","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","preloader","value","maxLengthCreator","maxLength","posts","likeCounts","profile","addPostAC","postText","setStatus","getUserProfile","newPost","postId"],"mappings":"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","file":"static/js/main.2ab0f23f.chunk.js","sourcesContent":["\r\ntype messageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype dialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type initialStateDialogsType = {\r\n    messages: Array<messageType>\r\n    dialogs:Array<dialogsType>\r\n}\r\nlet initialState: initialStateDialogsType = {\r\n    messages: [\r\n        { id: 1, message: \"Hi\"},\r\n        { id: 2, message: \"I am here\"},\r\n        { id: 3, message: \"bye\"},\r\n    ] as Array<messageType>,\r\n    dialogs: [\r\n        { id: 1, name: \"Alex\"},\r\n        { id: 2, name: \"Victor\"},\r\n        { id: 3, name: \"Sasha\"},\r\n        { id: 4, name: \"Mike\"},\r\n        { id: 5, name: \"Bob\"},\r\n    ] as Array<dialogsType>\r\n}\r\ntype ActionType = ReturnType<typeof addMessageAC> | ReturnType<typeof changeNewMessageTextCreate>\r\n| ReturnType<typeof removeMessageAC>\r\n\r\nconst dialogsReducer = (state: initialStateDialogsType = initialState, action: ActionType): initialStateDialogsType=>{\r\n    switch (action.type){\r\n        case \"ADD-MESSAGE\":{\r\n            const message = action.postMessage\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: message}]\r\n            }\r\n        }\r\n        case \"REMOVE-MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m=>m.id != action.messageId)\r\n            }\r\n        case \"UPDATE-YOUR-MESSAGE-TEXT\":{\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addMessageAC =(messageText:string)=>{\r\n    return{\r\n        type:'ADD-MESSAGE',\r\n        postMessage: messageText\r\n    }as const\r\n}\r\nexport const removeMessageAC =(messageId:number)=>{\r\n    return{\r\n        type:'REMOVE-MESSAGE',\r\n        messageId\r\n    }as const\r\n}\r\nexport const changeNewMessageTextCreate =(newText:string)=>{\r\n    return{\r\n        type:'UPDATE-YOUR-MESSAGE-TEXT',\r\n        newText: newText\r\n    }as const\r\n}\r\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1DaVf\",\"item\":\"Navbar_item__WDfDz\",\"activLink\":\"Navbar_activLink__15RwJ\",\"blockFriends\":\"Navbar_blockFriends__2qOQQ\",\"friends\":\"Navbar_friends__zYnjt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersPhoto\":\"users_UsersPhoto__3Y8x7\"};","import * as axios from \"axios\";\r\n\r\nconst instance = axios.default.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"07c457bc-e742-4380-afc8-e78bc10fd120\"\r\n    }\r\n})\r\nexport type ThunkLoginType = {\r\n    resultCode: number\r\n    messages: string[],\r\n        data: {\r\n    userId: number\r\n}\r\n}\r\n\r\nexport const UsersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unfollow(id: number | null) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(id: number | null) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfile(userId: number | null) {\r\n        return ProfileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport const ProfileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false){\r\n        return instance.post<ThunkLoginType>(`auth/login`, {email, password, rememberMe})\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type FriendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nconst Friends = React.memo((props: FriendType)=>{\r\n    let path = \"/Navbar/\" + props.id;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.src} />\r\n            </div>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})\r\nexport default Friends;","import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport Friend from \"./Friend/Friend\";\r\nimport {friendsType} from \"../Navbar\";\r\n\r\nexport type FriendsType = {\r\n    state:friendsType\r\n}\r\n\r\nconst Friends = React.memo((props: FriendsType)=>{\r\n    let friendsElements = props.state.friends.map( d =><Friend id={d.id} name={d.name} src={d.src}  /> )\r\n    return (\r\n        <div>\r\n            <div className={classes.blockFriends}>\r\n                <h3>Friends</h3>\r\n                <div className={classes.friends}>\r\n                    {friendsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Friends;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\nimport Friends from \"./Friends/Friends\";\r\nimport {friendType} from \"../../redux/navbar-reducer\";\r\n\r\nexport type friendsType = {\r\n    friends: Array<friendType>\r\n}\r\n\r\nexport type NavbarType = {\r\n    state: friendsType\r\n}\r\n\r\nconst Navbar = React.memo((props: NavbarType) => {\r\n    return (<nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.activLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.activLink}>Massage</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.activLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.activLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.activLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/setting\" activeClassName={classes.activLink}>Setting</NavLink>\r\n            </div>\r\n            <div>\r\n                <Friends state={props.state}/>\r\n            </div>\r\n        </nav>\r\n    )\r\n})\r\nexport default Navbar;","import React from 'react'\r\nimport classes from './Music.module.css'\r\n\r\nconst Music = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react'\r\nimport classes from './News.module.css'\r\n\r\nconst News = (props: any) =>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react'\r\nimport classes from './Setting.module.css'\r\n\r\nconst Setting = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Setting;","\r\nexport type friendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type ActionType ={}\r\nexport type initialStateType = {\r\n    friends: Array<friendType>\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        { id: 1, name: 'Kirill', src:\"https://cdni.rt.com/russian/images/2019.03/article/5c99e32a18356130668b45a2.JPG\"},\r\n        { id: 2, name: \"Peeter\", src: \"https://vokrug-tv.ru/pic/person/2/2/d/b/22db573c1118bc091c4267e15258d8ce.jpeg\"},\r\n        { id: 3, name: \"Vlad\", src: \"https://upload.wikimedia.org/wikipedia/ru/4/4e/Patrick_star-4854.jpg\"},\r\n    ],\r\n}\r\n\r\nconst navbarReducer = (state: initialStateType = initialState, action: ActionType):initialStateType=>{\r\n\r\n    return state\r\n}\r\n\r\nexport default navbarReducer","import {Dispatch} from \"redux\";\r\nimport {UsersAPI} from \"../api/api\";\r\n\r\nexport const FOLLOW = \"FOLLOW\"\r\nexport const UNFOLLOW = \"UNFOLLOW\"\r\nexport const SET_USERS = \"SET_USERS\"\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nexport const SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\"\r\nexport const TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport const unfollowSuccess = (userID: number) => ({type: UNFOLLOW, userID} as const)\r\nexport const followSuccess = (userID: number) => ({type: FOLLOW, userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalPage: number) => ({type: SET_TOTAL_COUNT, totalPage} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingIsProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\ntype ActionType = ReturnType<typeof unfollowSuccess> | ReturnType<typeof followSuccess> | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage> | ReturnType<typeof setTotalUsersCount> | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingIsProgress>\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type InitialStateUsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCounts: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingIsProgress: Array<number>\r\n}\r\n\r\nlet initialState: InitialStateUsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCounts: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingIsProgress: [],\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: ActionType): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET_TOTAL_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCounts: action.totalPage\r\n            }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingIsProgress: action.isFetching\r\n                    ? [...state.followingIsProgress, action.userId]\r\n                    : state.followingIsProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        const data = await UsersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch, userId: number,apiMethod: any, actionCreator: any )=>{\r\n    dispatch(toggleFollowingIsProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingIsProgress(false, userId))\r\n}\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.follow.bind(UsersAPI),followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.unfollow.bind(UsersAPI),unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport const SET_USER_DATA = \"SET_USER_DATA\"\r\nexport const UNFOLLOW = \"UNFOLLOW\"\r\n\r\n\r\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n    type: SET_USER_DATA, payload: {id, login, email, isAuth}\r\n} as const)\r\n\r\n\r\ntype ActionType = ReturnType<typeof setAuthUserData>\r\n\r\nexport type InitialStateAuthType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n}\r\n\r\nlet initialState: InitialStateAuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    isFetching: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateAuthType = initialState, action: ActionType): InitialStateAuthType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getAuthUsersData = ():AppThunk => {\r\n    return async (dispatch) => {\r\n        const res = await authAPI.me();\r\n            if (res.data.resultCode === 0) {\r\n                let {id, login, email} = res.data.data\r\n                dispatch(setAuthUserData(id, login, email, true))\r\n            }\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean):AppThunk => {\r\n    return async (dispatch) => {\r\n        const res = await authAPI.login(email, password, rememberMe)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getAuthUsersData())\r\n            }else {\r\n                let message = res.data.messages.length > 0? res.data.messages[0] : 'some error'\r\n                dispatch(stopSubmit('login',{_error: message}))\r\n            }\r\n    }\r\n}\r\nexport const logout = ():AppThunk => {\r\n    return async (dispatch) => {\r\n        const res = await authAPI.logout()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","import {AppThunk} from \"./redux-store\";\r\nimport {getAuthUsersData} from \"./auth-reducer\";\r\n\r\n\r\nexport const INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\"\r\n\r\ntype ActionType = ReturnType<typeof initializedSuccess>\r\n\r\nexport type InitialStateAuthType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateAuthType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateAuthType = initialState, action: ActionType): InitialStateAuthType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS} as const)\r\nexport const initializedApp = ():AppThunk => {\r\n    return (dispatch) => {\r\n        let promise = dispatch(getAuthUsersData());\r\n        Promise.all([promise])\r\n            .then(()=>{\r\n                dispatch(initializedSuccess())\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default appReducer","import {AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarPage:navbarReducer,\r\n    users:usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type RootReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type StoreReduxType = typeof store\r\n\r\nexport type AppThunk <ReturnType = void> = ThunkAction<ReturnType, RootReduxStateType, unknown, AnyAction>\r\n\r\nexport default store","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames'\r\n\r\ntype PaginatorType = {\r\n    pageSize: number\r\n    portionSize?: number\r\n    totalItemCounts: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({totalItemCounts,\r\n                                                                  pageSize,\r\n                                                                  onPageChanged = x => x,\r\n                                                                  currentPage = 1,\r\n                                                                  portionSize = 15}) => {\r\n    let pagesCount = Math.ceil(totalItemCounts / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n     }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    return (\r\n        <div className={cn(styles.pageBlock)}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }) }\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.ab7efdc7.png\";","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport styles from \"./users.module.css\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    followingIsProgress: Array<number>\r\n}\r\n\r\nexport const User = React.memo((props: UserPropsType) => {\r\n    let u = props.user;\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                    <span>\r\n                        <div>\r\n                           <NavLink to={'/profile/' + u.id}>\r\n                                <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                     className={styles.UsersPhoto}/>\r\n                           </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}>Unfollow</button>\r\n                                : <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.follow(u.id)\r\n                                          }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport { Paginator } from \"../Common/Paginator/Paginator\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\nimport {User} from \"./User\";\r\n\r\n\r\nexport const Users = React.memo ((props: UsersPropsType) => {\r\n    let pageCount = Math.ceil(props.totalUsersCounts / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                props.users.map(u => <User followingIsProgress={props.followingIsProgress}\r\n                                           unfollow={props.unfollow}\r\n                                           follow={props.follow}\r\n                                           user={u}\r\n                                           key={u.id}\r\n                />)\r\n            }\r\n            <Paginator currentPage={props.currentPage}\r\n                       onPageChanged={props.onPageChanged}\r\n                       pageSize={props.pageSize}\r\n                       totalItemCounts={props.totalUsersCounts}  />\r\n        </div>\r\n    )\r\n})\r\n","import { createSelector } from \"reselect\";\r\nimport {RootReduxStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: RootReduxStateType)=> {\r\n    return state.users.users;\r\n}\r\nexport const getUsersSelector = (state: RootReduxStateType)=>{\r\n    return getUsers(state).filter( u=> true);\r\n}\r\nexport const getUserSuper = createSelector(getUsersSelector,(users) =>{\r\n    return users.filter( u=> true);\r\n})\r\nexport const getPageSizeSelector = (state: RootReduxStateType)=>{\r\n    return state.users.pageSize;\r\n}\r\nexport const getTotalUsersCountsSelector = (state: RootReduxStateType)=>{\r\n    return state.users.totalUsersCounts;\r\n}\r\nexport const getCurrentPageSelector = (state: RootReduxStateType)=>{\r\n    return state.users.currentPage;\r\n}\r\nexport const getIsFetchingSelector = (state: RootReduxStateType)=>{\r\n    return state.users.isFetching;\r\n}\r\nexport const getFollowingIsProgressSelector = (state: RootReduxStateType)=>{\r\n    return state.users.followingIsProgress;\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    toggleFollowingIsProgress,\r\n    InitialStateUsersType,\r\n    setCurrentPage,\r\n    getUsers, follow, unfollow, UserType,\r\n} from \"../../redux/users-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPageSelector,\r\n    getFollowingIsProgressSelector,\r\n    getIsFetchingSelector,\r\n    getPageSizeSelector, getTotalUsersCountsSelector,\r\n    getUsersSelector\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    users:Array<UserType>\r\n    pageSize: number\r\n    totalUsersCounts: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingIsProgress: Array<number>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    toggleFollowingIsProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCounts={this.props.totalUsersCounts}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       users={this.props.users}\r\n                       onPageChanged={this.onPageChanged}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n                       toggleFollowingIsProgress={this.props.toggleFollowingIsProgress}\r\n                       followingIsProgress={this.props.followingIsProgress}\r\n                       getUsers={this.props.getUsers}\r\n                       isFetching={this.props.isFetching}\r\n                       setCurrentPage={this.props.setCurrentPage}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const mapStateToProps = (state: RootReduxStateType): MapStateToPropsType => {\r\n//     return {\r\n//         usersPage: state.users,\r\n//         pageSize: state.users.pageSize,\r\n//         totalUsersCounts: state.users.totalUsersCounts,\r\n//         currentPage: state.users.currentPage,\r\n//         isFetching: state.users.isFetching,\r\n//         followingIsProgress: state.users.followingIsProgress\r\n//     }\r\n// }\r\nconst mapStateToProps = (state: RootReduxStateType): MapStateToPropsType => {\r\n    return {\r\n        users:getUsersSelector(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        totalUsersCounts: getTotalUsersCountsSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching:getIsFetchingSelector(state),\r\n        followingIsProgress: getFollowingIsProgressSelector(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleFollowingIsProgress,\r\n        getUsers,\r\n    })\r\n)\r\n(UsersAPIComponent)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport {HeaderContainerType} from \"./HeaderContainer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nconst Header = React.memo((props: HeaderContainerType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <header className={classes.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Logo_TV_2015.svg/1200px-Logo_TV_2015.svg.png\"\r\n                alt=\"logo\"/>\r\n\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={logoutCallback}>logout</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n})\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return (\r\n            <Header login={this.props.login} isAuth={this.props.isAuth}/>\r\n        );\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n}\r\nexport type HeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: RootReduxStateType):mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps , {logout})(HeaderContainer);","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport style from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'email'}\r\n                       placeholder={'Login'}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'password'}\r\n                       placeholder={'Password'}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n            {props.error &&<div className={style.someError}>{props.error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = React.memo((props:any) => {\r\n    const  isAuth = useSelector((state:RootReduxStateType)=> state.auth.isAuth)\r\n    let onSubmit =(formData: FormDataType)=>{\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default connect(null, {login})(Login)","import React, {ComponentType} from \"react\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React, {ComponentType} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Music from './components/Music/Music';\r\nimport News from './components/News/News';\r\nimport Setting from './components/Setting/Setting';\r\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\r\nimport store, {RootReduxStateType} from \"./redux/redux-store\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializedApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {initialStateType} from \"./redux/navbar-reducer\";\r\n\r\nconst DialogsContainer = React.lazy(()=>import (\"./components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(()=>import (\"./components/Profile/ProfileContainer\"));\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\nclass App extends React.Component<mapStateToPropsType & mapDispatchToPropsType> {\r\n  componentDidMount() {\r\n    this.props.initializedApp();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n    return <BrowserRouter>\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar state={this.props.stateForNavbar}/>\r\n        <div className=\"app-wrapper-content\">\r\n          <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n          <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n          <Route path='/users' render={() => <UsersContainer/>}/>\r\n          <Route path='/login' render={() => <Login/>}/>\r\n          <Route path='/music' render={() => <Music/>}/>\r\n          <Route path='/news' render={() => <News/>}/>\r\n          <Route path='/setting' render={() => <Setting/>}/>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>;\r\n  }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  initialized: boolean\r\n  stateForNavbar: initialStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n  initializedApp:()=>void\r\n}\r\n\r\nconst mapStateToProps =(state: RootReduxStateType): mapStateToPropsType => ({\r\n  initialized:state.app.initialized,\r\n  stateForNavbar: state.navbarPage\r\n})\r\n\r\nlet AppClass = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps,{initializedApp}))(App);\r\n\r\nconst AppContainer: React.FC = () => {\r\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n      <AppClass />\r\n    </Provider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default AppContainer\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport AppContainer from \"./App\";\r\n\r\n\r\n    ReactDOM.render(<AppContainer />, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3ioei\",\"error\":\"FormsControls_error__3p3c6\",\"someError\":\"FormsControls_someError__3vEc_\"};","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta:{touched, error}, children})=>{\r\n\r\n    const hasError = touched && error;\r\n\r\n    return <div className={styles.formControl + ' ' + (hasError ?styles.error : '')}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        { hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/loader.c2493588.gif\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.gif\";\r\n\r\nconst Preloader = React.memo(()=>{\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n})\r\nexport default Preloader","export const required = (value: any) =>{\r\n    if(!!value)return undefined\r\n\r\n    return 'Filed is required'\r\n}\r\nexport const maxLengthCreator =(maxLength:number)=> {\r\n    return (value: any) =>{\r\n        if(value && value.length > 30)return `Max length is ${maxLength} symbols`\r\n\r\n        return undefined;\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageBlock\":\"Paginator_pageBlock__1H8JD\",\"selectedPage\":\"Paginator_selectedPage__49Bpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__D7bkY\",\"loginBlock\":\"Header_loginBlock__21Ia6\"};","import {ProfileType} from \"../components/Profile/ProfileContainer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI, UsersAPI} from \"../api/api\";\r\n\r\n\r\n\r\ntype ActionType = ReturnType<typeof addPostAC> | ReturnType<typeof setUserProfile>\r\n| ReturnType<typeof setStatus> | deleteActionType\r\n\r\nexport type postType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\nexport type InitialStatePostType  = {\r\n    posts: Array<postType>\r\n    profile:ProfileType\r\n    status: string\r\n}\r\n\r\nexport let initialState: InitialStatePostType = {\r\n    posts: [\r\n        {id: 1,message: \"Hello, It is my first massage\", likeCounts: 15},\r\n        {id: 2, message: \"Hello, I am Lesha\", likeCounts: 30},\r\n    ],\r\n    profile:{\r\n        \"aboutMe\": \"я круто чувак 1001%\",\r\n        \"contacts\": {\r\n            \"facebook\": \"facebook.com\",\r\n            \"website\": null,\r\n            \"vk\": \"vk.com/dimych\",\r\n            \"twitter\": \"https://twitter.com/@sdf\",\r\n            \"instagram\": \"instagra.com/sds\",\r\n            \"youtube\": null,\r\n            \"github\": \"github.com\",\r\n            \"mainLink\": null\r\n        },\r\n        \"lookingForAJob\": true,\r\n        \"lookingForAJobDescription\": \"не ищу, а дурачусь!!!\",\r\n        \"fullName\": \"samurai dimych\",\r\n        \"userId\": 2,\r\n        \"photos\": {\r\n            \"small\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\r\n            \"large\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\r\n        }\r\n    },\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: InitialStatePostType = initialState, action: ActionType):InitialStatePostType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            const newPost = action.postMessage\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 8, message: newPost, likeCounts: 0}]\r\n        }}\r\n        case \"REMOVE-POST\":\r\n            return {\r\n            ...state,\r\n            posts: state.posts.filter(p=> p.id != action.postId)\r\n        }\r\n        case \"SET_USER_PROFILE\":{\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        postMessage: postText\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: 'REMOVE-POST',\r\n        postId\r\n    } as const\r\n}\r\nexport type deleteActionType = ReturnType<typeof deletePostAC>\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: 'SET_USER_PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET_STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport const getUserProfile = (userId: number | null) =>async (dispatch: Dispatch)=> {\r\n    const response = await UsersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: number | null) =>async (dispatch: Dispatch)=> {\r\n     const response = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch)=> {\r\n    const response = await ProfileAPI.updateStatus(status)\r\n            if(response.data.resultCode === 0){\r\n                dispatch(setStatus(status))\r\n            }\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}