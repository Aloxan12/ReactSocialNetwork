{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","React","memo","useState","editMode","setEditMode","status","setStatus","useEffect","className","classes","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","statusInput","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","formProfile","Edit","style","someError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileInfo","Preloader","content","photoContainer","src","photos","large","userPhoto","mainPhoto","isOwner","uploadPhoto","target","files","length","savePhoto","profileContainer","initialValues","formData","saveProfile","then","goToEditMode","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","Post","photo","useSelector","profilePage","item","alt","avatar","like","likeCounts","messages","text","message","corner","removeMessage","removeBtn","AddPostFormRedux","required","btn","MyPosts","dispatch","useDispatch","postsElement","posts","reverse","p","id","v1","actions","deletePostAC","postsBlock","addPostAreaBlock","addPost","newPostText","MyPostsContainer","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.ac6acb57.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReduxStateType): mapStateToPropsForRedirectType=>{\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent =( props: mapStateToPropsForRedirectType) =>{\r\n            let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2ONw7\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2UnZt\",\"contact\":\"ProfileInfo_contact__93i0i\",\"formProfile\":\"ProfileInfo_formProfile__3CiVQ\",\"Edit\":\"ProfileInfo_Edit__3xxS6\",\"photoContainer\":\"ProfileInfo_photoContainer__usyb3\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__2JzhI\",\"profileContainer\":\"ProfileInfo_profileContainer__2a4AB\",\"status\":\"ProfileInfo_status__2q2o5\",\"statusInput\":\"ProfileInfo_statusInput__1tWF2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1GKQ3\",\"mainimg\":\"Profile_mainimg__10R4y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__24D9b\",\"posts\":\"MyPosts_posts__1JATQ\",\"addPostBlock\":\"MyPosts_addPostBlock__1bSNh\",\"addPostAreaBlock\":\"MyPosts_addPostAreaBlock__21kQy\",\"addPostButtonBlock\":\"MyPosts_addPostButtonBlock__fCzOZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__3jI-E\",\"item\":\"Post_item__1Pbaz\",\"avatar\":\"Post_avatar__3m3Vh\",\"like\":\"Post_like__i7Pcq\",\"messages\":\"Post_messages__1wQBr\",\"text\":\"Post_text__1qovt\",\"corner\":\"Post_corner__1wQxJ\",\"removeBtn\":\"Post_removeBtn__37R2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"AddPostForm_btn__20ZhT\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = React.memo( (props: ProfileStatusType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const activeEditMode = ()=>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = ()=>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeStatus =(e: ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className={classes.status}>\r\n                    <b>Status: </b><span onDoubleClick={activeEditMode}>{props.status || '----'}</span>\r\n                </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} onChange={onChangeStatus} onBlur={deactivateEditMode} autoFocus className={classes.statusInput}/>\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport style from \"../../Common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../redux/types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.formProfile}>\r\n            <div><button className={classes.Edit}>Save</button></div>\r\n            {error &&<div className={style.someError}>{error}</div>}\r\n            <div>\r\n                <b>Full name</b>:{createField<ProfileTypeKeys>(\"Full name\", 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                    {createField('','lookingForAJob',[],Input, {type:'checkbox'})}\r\n            </div>\r\n            <div>\r\n                <b>My prof skill</b>:\r\n                {createField('My prof skill','lookingForAJobDescription',[],Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField('About me','aboutMe',[],Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:{\r\n                Object\r\n                    .keys(profile.contacts)\r\n                    .map((key: string) => {\r\n                        return  <div key={key} className={classes.contact}>\r\n                            {/* todo: create some solution for embedded objects */}\r\n                            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                        </div>})\r\n            }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/types/types\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo = React.memo((props: ProfileInfoType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n    return (\r\n        <div className={classes.content}>\r\n            <div className={classes.photoContainer}>\r\n                <img src={props.profile.photos.large || userPhoto} className={classes.mainPhoto}/>\r\n                {props.isOwner &&\r\n                <label className={classes.uploadPhoto}>\r\n                    <span>Upload new photo</span>\r\n                    <input type='file' onChange={onMainPhotoSelected}/>\r\n                </label>\r\n                }\r\n            </div>\r\n            <div className={classes.profileContainer}>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                {editMode ?\r\n                    <ProfileDataForm  initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\ntype ProfileDataPropsType =\r\n    {\r\n        profile: ProfileType\r\n        isOwner: boolean\r\n        goToEditMode: () => void\r\n    }\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={classes.formProfile}>\r\n            {isOwner && <div><button onClick={goToEditMode} className={classes.Edit}>Edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>:{profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:{profile.lookingForAJob}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My prof skill</b>:{profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>:{profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:{\r\n                Object\r\n                    .keys(profile.contacts)\r\n                    .map((key: string) => {\r\n                        return <Contacts key={key} contactTitle={key}\r\n                                         contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                    })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = { contactTitle: string, contactValue: string }\r\nexport const Contacts: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={classes.contact}><b>{contactTitle}</b>: {contactValue} </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport userPhoto from '../../../../assets/images/user.png';\r\nimport {RootReduxStateType} from \"../../../../redux/redux-store\";\r\n\r\n\r\nconst Post = React.memo((props: PostType) => {\r\n    const photo = useSelector<RootReduxStateType, string | null | undefined>(state => state.profilePage.profile?.photos.large)\r\n\r\n    return (<div className={classes.content}>\r\n            <div className={classes.item}>\r\n                <img src={photo ? photo : userPhoto} alt=\"\" className={classes.avatar}/>\r\n                <div className={classes.like}>\r\n                    <span>Like: </span> {props.likeCounts}\r\n                </div>\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <span className={classes.text}>{props.message}</span>\r\n                <div className={classes.corner}></div>\r\n                <button onClick={props.removeMessage} className={classes.removeBtn}>x</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Post;","import {required} from \"../../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport classes from './AddPostForm.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Textarea) }\r\n            </div>\r\n            <div>\r\n                <button className={classes.btn}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddPostFormRedux = reduxForm<AddPostFormValuesType, PropsType>({form: 'dialogAddMessageForm'})(AddPostForm)","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\"\r\nimport Post from './Post/Post';\r\nimport {actions, PostType} from \"../../../redux/profile-reducer\";\r\nimport {AddPostFormRedux, AddPostFormValuesType} from './AddPostForm/AddPostForm';\r\nimport {v1} from \"uuid\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    const dispatch = useDispatch()\r\n    let postsElement =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => {\r\n                const removePost = () => {\r\n                    dispatch(actions.deletePostAC(p.id))\r\n                }\r\n                return <Post message={p.message}\r\n                             key={p.id}\r\n                             likeCounts={p.likeCounts}\r\n                             id={v1()}\r\n                             removeMessage={removePost}\r\n                />\r\n            })\r\n\r\n    const addNewMessage = (value: AddPostFormValuesType) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My post</h3>\r\n            <div>\r\n                <div className={classes.addPostAreaBlock}>\r\n                    <AddPostFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\n\r\nimport {RootReduxStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps = (state: RootReduxStateType) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        posts: state.profilePage.posts,\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, RootReduxStateType>(mapStateToProps, {\r\n    addPost: actions.addPostAC\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/types/types\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus:(status: string)=> void\r\n    savePhoto:(file: File)=> void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    isOwner:boolean\r\n}\r\n\r\nconst Profile = React.memo((props: ProfilePropsType) => {\r\n  return (\r\n    <div className={classes.content}>\r\n      <ProfileInfo profile={props.profile}\r\n                   savePhoto={props.savePhoto}\r\n                   saveProfile={props.saveProfile}\r\n                   status={props.status}\r\n                   updateStatus={props.updateStatus}\r\n                   isOwner={props.isOwner}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n})\r\nexport default Profile;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport Profile from './Profile';\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../redux/types/types\";\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile:(userId: number | null)=> void\r\n    getStatus:(userId: number | null)=> void\r\n    updateStatus:(status: string)=> void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    savePhoto:(file: File)=> void\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType =  ReturnType<typeof mapStateToProps>\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile(){\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId){\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.content}>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         isOwner={!this.props.match.params.userId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps =(state: RootReduxStateType)=>{\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}