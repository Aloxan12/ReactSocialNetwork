{"version":3,"sources":["components/Users/users.module.css","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","reportWebVitals.ts","components/Navbar/Friends/Friend/Friend.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Setting/Setting.tsx","api/api.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/navbar-reducer.tsx","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","assets/images/loader.gif","components/Common/Preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Common/Paginator/Paginator.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post.module.css","components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Friends","React","memo","props","path","id","src","to","name","friendsElements","state","friends","map","d","Friend","className","classes","blockFriends","Navbar","nav","item","activeClassName","activLink","Music","News","Setting","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","getUsers","currentPage","pageSize","get","response","data","unfollow","delete","follow","post","getProfile","userId","ProfileAPI","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","initialState","posts","message","likeCounts","profile","setStatus","type","profileReducer","action","newPost","postMessage","filter","p","postId","messages","dialogs","dialogsReducer","m","messageId","navbarReducer","unfollowSuccess","userID","followSuccess","setCurrentPage","toggleIsFetching","isFetching","toggleFollowingIsProgress","users","totalUsersCounts","followingIsProgress","followUnfollow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","u","followed","totalPage","setAuthUserData","login","isAuth","payload","getAuthUsersData","res","logout","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","navbarPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","DialogsItem","dialog","active","Message","massage","FormControl","meta","touched","error","children","hasError","styles","formControl","Textarea","input","restProps","Input","required","value","maxLengthCreator","maxLength","length","maxLength50","AddMessageForm","onSubmit","handleSubmit","Field","component","placeholder","validate","reduxForm","Dialogs","dialogsElements","messageElements","dialogsItems","massages","addMessage","newMessageBody","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","compose","newMessage","Paginator","totalItemCounts","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","pageBlock","onClick","selectedPage","e","User","user","photos","small","userPhoto","UsersPhoto","disabled","some","Users","pageCount","Preloader","preloader","getUsersSelector","getPageSizeSelector","createSelector","getTotalUsersCountsSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingIsProgressSelector","UsersAPIComponent","pageNumber","this","bind","items","totalCount","ProfileStatusWithHooks","editMode","setEditMode","useEffect","onDoubleClick","onChange","currentTarget","onBlur","autoFocus","ProfileInfo","content","alt","mainimg","fullName","lookingForAJobDescription","aboutMe","Post","MyPosts","postsElement","Date","getTime","postsBlock","addPostAreaBlock","AddPostFormRedux","onAddPost","newPostBody","maxLength30","MyPostsContainer","newText","Profile","ProfileContainer","match","params","authorizedUserId","history","getUserProfile","withRouter","Header","useDispatch","header","loginBlock","HeaderContainer","LoginReduxForm","style","someError","Login","useSelector","formData","stopSubmit","_error","App","initializedApp","stateForNavbar","render","DialogsContainer","UsersContainer","AppClass","promise","Promise","all","AppContainer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a03e9261.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersPhoto\":\"users_UsersPhoto__3Y8x7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1DaVf\",\"item\":\"Navbar_item__WDfDz\",\"activLink\":\"Navbar_activLink__15RwJ\",\"blockFriends\":\"Navbar_blockFriends__2qOQQ\",\"friends\":\"Navbar_friends__zYnjt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__19NLv\",\"dialogsItems\":\"Dialogs_dialogsItems__1K_cq\",\"dialog\":\"Dialogs_dialog__2YVY5\",\"massages\":\"Dialogs_massages__3xbtD\",\"massage\":\"Dialogs_massage__1r1vQ\",\"addMessage\":\"Dialogs_addMessage__Zw-sq\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type FriendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nconst Friends = React.memo((props: FriendType)=>{\r\n    let path = \"/Navbar/\" + props.id;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.src} />\r\n            </div>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})\r\nexport default Friends;","import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport Friend from \"./Friend/Friend\";\r\nimport {friendsType} from \"../Navbar\";\r\n\r\nexport type FriendsType = {\r\n    state:friendsType\r\n}\r\n\r\nconst Friends = React.memo((props: FriendsType)=>{\r\n    let friendsElements = props.state.friends.map( d =><Friend id={d.id} name={d.name} src={d.src}  /> )\r\n    return (\r\n        <div>\r\n            <div className={classes.blockFriends}>\r\n                <h3>Friends</h3>\r\n                <div className={classes.friends}>\r\n                    {friendsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Friends;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\nimport Friends from \"./Friends/Friends\";\r\nimport {friendType} from \"../../redux/navbar-reducer\";\r\n\r\nexport type friendsType = {\r\n    friends: Array<friendType>\r\n}\r\n\r\nexport type NavbarType = {\r\n    state: friendsType\r\n}\r\n\r\nconst Navbar = React.memo((props: NavbarType) => {\r\n    return (<nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.activLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.activLink}>Massage</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.activLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.activLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.activLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/setting\" activeClassName={classes.activLink}>Setting</NavLink>\r\n            </div>\r\n            <div>\r\n                <Friends state={props.state}/>\r\n            </div>\r\n        </nav>\r\n    )\r\n})\r\nexport default Navbar;","import React from 'react'\r\nimport classes from './Music.module.css'\r\n\r\nconst Music = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react'\r\nimport classes from './News.module.css'\r\n\r\nconst News = (props: any) =>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react'\r\nimport classes from './Setting.module.css'\r\n\r\nconst Setting = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Setting;","import * as axios from \"axios\";\r\n\r\nconst instance = axios.default.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"07c457bc-e742-4380-afc8-e78bc10fd120\"\r\n    }\r\n})\r\nexport type ThunkLoginType = {\r\n    resultCode: number\r\n    messages: string[],\r\n        data: {\r\n    userId: number\r\n}\r\n}\r\n\r\nexport const UsersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unfollow(id: number | null) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(id: number | null) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfile(userId: number | null) {\r\n        return ProfileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport const ProfileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false){\r\n        return instance.post<ThunkLoginType>(`auth/login`, {email, password, rememberMe})\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    }\r\n}","import {ProfileType} from \"../components/Profile/ProfileContainer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI, UsersAPI} from \"../api/api\";\r\n\r\n\r\n\r\ntype ActionType = ReturnType<typeof addPostAC> | ReturnType<typeof setUserProfile>\r\n| ReturnType<typeof setStatus> | deleteActionType\r\n\r\nexport type postType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\nexport type InitialStatePostType  = {\r\n    posts: Array<postType>\r\n    profile:ProfileType\r\n    status: string\r\n}\r\n\r\nexport let initialState: InitialStatePostType = {\r\n    posts: [\r\n        {id: 1,message: \"Hello, It is my first massage\", likeCounts: 15},\r\n        {id: 2, message: \"Hello, I am Lesha\", likeCounts: 30},\r\n    ],\r\n    profile:{\r\n        \"aboutMe\": \"я круто чувак 1001%\",\r\n        \"contacts\": {\r\n            \"facebook\": \"facebook.com\",\r\n            \"website\": null,\r\n            \"vk\": \"vk.com/dimych\",\r\n            \"twitter\": \"https://twitter.com/@sdf\",\r\n            \"instagram\": \"instagra.com/sds\",\r\n            \"youtube\": null,\r\n            \"github\": \"github.com\",\r\n            \"mainLink\": null\r\n        },\r\n        \"lookingForAJob\": true,\r\n        \"lookingForAJobDescription\": \"не ищу, а дурачусь!!!\",\r\n        \"fullName\": \"samurai dimych\",\r\n        \"userId\": 2,\r\n        \"photos\": {\r\n            \"small\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\r\n            \"large\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\r\n        }\r\n    },\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: InitialStatePostType = initialState, action: ActionType):InitialStatePostType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            const newPost = action.postMessage\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 8, message: newPost, likeCounts: 0}]\r\n        }}\r\n        case \"REMOVE-POST\":\r\n            return {\r\n            ...state,\r\n            posts: state.posts.filter(p=> p.id != action.postId)\r\n        }\r\n        case \"SET_USER_PROFILE\":{\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        postMessage: postText\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: 'REMOVE-POST',\r\n        postId\r\n    } as const\r\n}\r\nexport type deleteActionType = ReturnType<typeof deletePostAC>\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: 'SET_USER_PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET_STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport const getUserProfile = (userId: number | null) =>async (dispatch: Dispatch)=> {\r\n    const response = await UsersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: number | null) =>async (dispatch: Dispatch)=> {\r\n     const response = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch)=> {\r\n    const response = await ProfileAPI.updateStatus(status)\r\n            if(response.data.resultCode === 0){\r\n                dispatch(setStatus(status))\r\n            }\r\n}\r\n\r\nexport default profileReducer","\r\ntype messageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype dialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type initialStateDialogsType = {\r\n    messages: Array<messageType>\r\n    dialogs:Array<dialogsType>\r\n}\r\nlet initialState: initialStateDialogsType = {\r\n    messages: [\r\n        { id: 1, message: \"Hi\"},\r\n        { id: 2, message: \"I am here\"},\r\n        { id: 3, message: \"bye\"},\r\n    ] as Array<messageType>,\r\n    dialogs: [\r\n        { id: 1, name: \"Alex\"},\r\n        { id: 2, name: \"Victor\"},\r\n        { id: 3, name: \"Sasha\"},\r\n        { id: 4, name: \"Mike\"},\r\n        { id: 5, name: \"Bob\"},\r\n    ] as Array<dialogsType>\r\n}\r\ntype ActionType = ReturnType<typeof addMessageAC> | ReturnType<typeof changeNewMessageTextCreate>\r\n| ReturnType<typeof removeMessageAC>\r\n\r\nconst dialogsReducer = (state: initialStateDialogsType = initialState, action: ActionType): initialStateDialogsType=>{\r\n    switch (action.type){\r\n        case \"ADD-MESSAGE\":{\r\n            const message = action.postMessage\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: message}]\r\n            }\r\n        }\r\n        case \"REMOVE-MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m=>m.id != action.messageId)\r\n            }\r\n        case \"UPDATE-YOUR-MESSAGE-TEXT\":{\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addMessageAC =(messageText:string)=>{\r\n    return{\r\n        type:'ADD-MESSAGE',\r\n        postMessage: messageText\r\n    }as const\r\n}\r\nexport const removeMessageAC =(messageId:number)=>{\r\n    return{\r\n        type:'REMOVE-MESSAGE',\r\n        messageId\r\n    }as const\r\n}\r\nexport const changeNewMessageTextCreate =(newText:string)=>{\r\n    return{\r\n        type:'UPDATE-YOUR-MESSAGE-TEXT',\r\n        newText: newText\r\n    }as const\r\n}\r\nexport default dialogsReducer","\r\nexport type friendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type ActionType ={}\r\ntype initialStateType = {\r\n    friends: Array<friendType>\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        { id: 1, name: 'Kirill', src:\"https://cdni.rt.com/russian/images/2019.03/article/5c99e32a18356130668b45a2.JPG\"},\r\n        { id: 2, name: \"Peeter\", src: \"https://vokrug-tv.ru/pic/person/2/2/d/b/22db573c1118bc091c4267e15258d8ce.jpeg\"},\r\n        { id: 3, name: \"Vlad\", src: \"https://upload.wikimedia.org/wikipedia/ru/4/4e/Patrick_star-4854.jpg\"},\r\n    ],\r\n}\r\n\r\nconst navbarReducer = (state: initialStateType = initialState, action: ActionType)=>{\r\n\r\n    return state\r\n}\r\n\r\nexport default navbarReducer","import {Dispatch} from \"redux\";\r\nimport {UsersAPI} from \"../api/api\";\r\n\r\nexport const FOLLOW = \"FOLLOW\"\r\nexport const UNFOLLOW = \"UNFOLLOW\"\r\nexport const SET_USERS = \"SET_USERS\"\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nexport const SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\"\r\nexport const TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport const unfollowSuccess = (userID: number) => ({type: UNFOLLOW, userID} as const)\r\nexport const followSuccess = (userID: number) => ({type: FOLLOW, userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalPage: number) => ({type: SET_TOTAL_COUNT, totalPage} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingIsProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\ntype ActionType = ReturnType<typeof unfollowSuccess> | ReturnType<typeof followSuccess> | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage> | ReturnType<typeof setTotalUsersCount> | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingIsProgress>\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type InitialStateUsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCounts: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingIsProgress: Array<number>\r\n}\r\n\r\nlet initialState: InitialStateUsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCounts: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingIsProgress: [],\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: ActionType): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET_TOTAL_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCounts: action.totalPage\r\n            }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingIsProgress: action.isFetching\r\n                    ? [...state.followingIsProgress, action.userId]\r\n                    : state.followingIsProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        const data = await UsersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch, userId: number,apiMethod: any, actionCreator: any )=>{\r\n    dispatch(toggleFollowingIsProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingIsProgress(false, userId))\r\n}\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.follow.bind(UsersAPI),followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.unfollow.bind(UsersAPI),unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport const SET_USER_DATA = \"SET_USER_DATA\"\r\nexport const UNFOLLOW = \"UNFOLLOW\"\r\n\r\n\r\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n    type: SET_USER_DATA, payload: {id, login, email, isAuth}\r\n} as const)\r\n\r\n\r\ntype ActionType = ReturnType<typeof setAuthUserData>\r\n\r\nexport type InitialStateAuthType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n}\r\n\r\nlet initialState: InitialStateAuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    isFetching: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateAuthType = initialState, action: ActionType): InitialStateAuthType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getAuthUsersData = ():AppThunk => {\r\n    return async (dispatch) => {\r\n        const res = await authAPI.me();\r\n            if (res.data.resultCode === 0) {\r\n                let {id, login, email} = res.data.data\r\n                dispatch(setAuthUserData(id, login, email, true))\r\n            }\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean):AppThunk => {\r\n    return async (dispatch) => {\r\n        const res = await authAPI.login(email, password, rememberMe)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getAuthUsersData())\r\n            }else {\r\n                let message = res.data.messages.length > 0? res.data.messages[0] : 'some error'\r\n                dispatch(stopSubmit('login',{_error: message}))\r\n            }\r\n    }\r\n}\r\nexport const logout = ():AppThunk => {\r\n    return async (dispatch) => {\r\n        const res = await authAPI.logout()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","import {AppThunk} from \"./redux-store\";\r\nimport {getAuthUsersData} from \"./auth-reducer\";\r\n\r\n\r\nexport const INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\"\r\n\r\ntype ActionType = ReturnType<typeof initializedSuccess>\r\n\r\nexport type InitialStateAuthType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateAuthType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateAuthType = initialState, action: ActionType): InitialStateAuthType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS} as const)\r\nexport const initializedApp = ():AppThunk => {\r\n    return (dispatch) => {\r\n        let promise = dispatch(getAuthUsersData());\r\n        Promise.all([promise])\r\n            .then(()=>{\r\n                dispatch(initializedSuccess())\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default appReducer","import {AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarPage:navbarReducer,\r\n    users:usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type RootReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type StoreReduxType = typeof store\r\n\r\nexport type AppThunk <ReturnType = void> = ThunkAction<ReturnType, RootReduxStateType, unknown, AnyAction>\r\n\r\nexport default store","import { type } from 'os'\r\nimport React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\nexport type DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogsItem = React.memo((props:DialogsItemType) =>{\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className= {classes.dialog + ' ' + classes.active}>\r\n            <div>\r\n            <img src=\"https://img3.goodfon.ru/wallpaper/nbig/f/67/naruto-shippuden-uzumaki-31.jpg\" />\r\n            </div>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default DialogsItem;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\nconst Message = React.memo((props:MessageType)=>{\r\n    return (\r\n        <div className={classes.massage}>{props.message}</div>\r\n    )\r\n})\r\nexport default Message;","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta:{touched, error}, children})=>{\r\n\r\n    const hasError = touched && error;\r\n\r\n    return <div className={styles.formControl + ' ' + (hasError ?styles.error : '')}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        { hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n","export const required = (value: any) =>{\r\n    if(!!value)return undefined\r\n\r\n    return 'Filed is required'\r\n}\r\nexport const maxLengthCreator =(maxLength:number)=> {\r\n    return (value: any) =>{\r\n        if(value && value.length > 30)return `Max length is ${maxLength} symbols`\r\n\r\n        return undefined;\r\n    }\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType>> = React.memo((props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogsItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport AddMessageForm, { NewMessageFormValuesType} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = React.memo((props: DialogsPropsType ) =>{\r\n    let dialogsElements = props.dialogsPage.dialogs.map( d =><DialogsItem id={d.id} name={d.name}  /> )\r\n    let messageElements = props.dialogsPage.messages.map(m => <Message message={m.message} /> )\r\n\r\n\r\n    let addNewMessage = (value: NewMessageFormValuesType)=>{\r\n        props.addMessage(value.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.massages}>\r\n                {messageElements}\r\n                <div className={classes.addMessage}>\r\n                    <AddMessageForm onSubmit={addNewMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Dialogs;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReduxStateType): mapStateToPropsForRedirectType=>{\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent =( props: mapStateToPropsForRedirectType) =>{\r\n            let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React, {ChangeEvent} from 'react'\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {addMessageAC, changeNewMessageTextCreate, initialStateDialogsType} from \"../../redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {mapStateToPropsForRedirectType, withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: initialStateDialogsType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage:(newMessage: string)=> void\r\n}\r\nexport type DialogsPropsType = MapDispatchToPropsType & MapStateToPropsType & mapStateToPropsForRedirectType\r\n\r\nconst mapStateToProps = (state: RootReduxStateType): MapStateToPropsType=>{\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType=>{\r\n    return{\r\n        addMessage:(newMessage: string)=>{\r\n            dispatch(addMessageAC(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames'\r\n\r\ntype PaginatorType = {\r\n    pageSize: number\r\n    portionSize?: number\r\n    totalItemCounts: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({totalItemCounts,\r\n                                                                  pageSize,\r\n                                                                  onPageChanged = x => x,\r\n                                                                  currentPage = 1,\r\n                                                                  portionSize = 15}) => {\r\n    let pagesCount = Math.ceil(totalItemCounts / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n     }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    return (\r\n        <div className={cn(styles.pageBlock)}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }) }\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.ab7efdc7.png\";","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport styles from \"./users.module.css\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    followingIsProgress: Array<number>\r\n}\r\n\r\nexport const User = React.memo((props: UserPropsType) => {\r\n    let u = props.user;\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                    <span>\r\n                        <div>\r\n                           <NavLink to={'/profile/' + u.id}>\r\n                                <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                     className={styles.UsersPhoto}/>\r\n                           </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}>Unfollow</button>\r\n                                : <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.follow(u.id)\r\n                                          }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport { Paginator } from \"../Common/Paginator/Paginator\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\nimport {User} from \"./User\";\r\n\r\n\r\nexport const Users = React.memo ((props: UsersPropsType) => {\r\n    let pageCount = Math.ceil(props.totalUsersCounts / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                props.users.map(u => <User followingIsProgress={props.followingIsProgress}\r\n                                           unfollow={props.unfollow}\r\n                                           follow={props.follow}\r\n                                           user={u}\r\n                                           key={u.id}\r\n                />)\r\n            }\r\n            <Paginator currentPage={props.currentPage}\r\n                       onPageChanged={props.onPageChanged}\r\n                       pageSize={props.pageSize}\r\n                       totalItemCounts={props.totalUsersCounts}  />\r\n        </div>\r\n    )\r\n})\r\n","export default __webpack_public_path__ + \"static/media/loader.c2493588.gif\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.gif\";\r\n\r\nconst Preloader = React.memo(()=>{\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n})\r\nexport default Preloader","import { createSelector } from \"reselect\";\r\nimport {RootReduxStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: RootReduxStateType)=> {\r\n    return state.users.users;\r\n}\r\nexport const getUsersSelector = (state: RootReduxStateType)=>{\r\n    return getUsers(state).filter( u=> true);\r\n}\r\nexport const getUserSuper = createSelector(getUsersSelector,(users) =>{\r\n    return users.filter( u=> true);\r\n})\r\nexport const getPageSizeSelector = (state: RootReduxStateType)=>{\r\n    return state.users.pageSize;\r\n}\r\nexport const getTotalUsersCountsSelector = (state: RootReduxStateType)=>{\r\n    return state.users.totalUsersCounts;\r\n}\r\nexport const getCurrentPageSelector = (state: RootReduxStateType)=>{\r\n    return state.users.currentPage;\r\n}\r\nexport const getIsFetchingSelector = (state: RootReduxStateType)=>{\r\n    return state.users.isFetching;\r\n}\r\nexport const getFollowingIsProgressSelector = (state: RootReduxStateType)=>{\r\n    return state.users.followingIsProgress;\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    toggleFollowingIsProgress,\r\n    InitialStateUsersType,\r\n    setCurrentPage,\r\n    getUsers, follow, unfollow, UserType,\r\n} from \"../../redux/users-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPageSelector,\r\n    getFollowingIsProgressSelector,\r\n    getIsFetchingSelector,\r\n    getPageSizeSelector, getTotalUsersCountsSelector,\r\n    getUsersSelector\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    users:Array<UserType>\r\n    pageSize: number\r\n    totalUsersCounts: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingIsProgress: Array<number>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    toggleFollowingIsProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCounts={this.props.totalUsersCounts}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       users={this.props.users}\r\n                       onPageChanged={this.onPageChanged}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n                       toggleFollowingIsProgress={this.props.toggleFollowingIsProgress}\r\n                       followingIsProgress={this.props.followingIsProgress}\r\n                       getUsers={this.props.getUsers}\r\n                       isFetching={this.props.isFetching}\r\n                       setCurrentPage={this.props.setCurrentPage}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const mapStateToProps = (state: RootReduxStateType): MapStateToPropsType => {\r\n//     return {\r\n//         usersPage: state.users,\r\n//         pageSize: state.users.pageSize,\r\n//         totalUsersCounts: state.users.totalUsersCounts,\r\n//         currentPage: state.users.currentPage,\r\n//         isFetching: state.users.isFetching,\r\n//         followingIsProgress: state.users.followingIsProgress\r\n//     }\r\n// }\r\nconst mapStateToProps = (state: RootReduxStateType): MapStateToPropsType => {\r\n    return {\r\n        users:getUsersSelector(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        totalUsersCounts: getTotalUsersCountsSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching:getIsFetchingSelector(state),\r\n        followingIsProgress: getFollowingIsProgressSelector(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleFollowingIsProgress,\r\n        getUsers,\r\n    })\r\n)\r\n(UsersAPIComponent)","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = React.memo( (props: ProfileStatusType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const activeEditMode = ()=>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = ()=>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeStatus =(e: ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activeEditMode}>{props.status || '----'}</span>\r\n                </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} onChange={onChangeStatus} onBlur={deactivateEditMode} autoFocus/>\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(status: string)=> void\r\n}\r\n\r\nconst ProfileInfo = React.memo((props: ProfileInfoType) => {\r\n    if(!props.profile){\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={classes.content}>\r\n            <div>\r\n                <img src=\"http://www.rosphoto.com/images/u/articles/1511/4-dalius-baranauskas.jpg\" alt=\"photo\"\r\n                     className={classes.mainimg}/>\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n                {props.profile.userId} - my id!!!\r\n                <img src={props.profile.photos.small}/>\r\n                <h1>Привет, меня зовут {props.profile.fullName}</h1>\r\n                <p> работа: {props.profile.lookingForAJobDescription}</p>\r\n                <p>Все что нужно знать обо мне так это то, что {props.profile.aboutMe}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from \"./Post.module.css\"\r\nimport {postType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst Post = React.memo((props: postType) => {\r\n  return (<div className={classes.content}>\r\n    <div className={classes.item}>\r\n      <img src=\"https://i.pinimg.com/564x/e7/99/2f/e7992f29c5f2f4fc61692299f4b30bbc.jpg\" alt=\"\" />\r\n          {props.message}\r\n          <div>\r\n              <span>like </span> {props.likeCounts}\r\n          </div>\r\n          </div>\r\n  </div>\r\n  )\r\n})\r\nexport default Post;","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\"\r\nimport Post from './Post';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n  let postsElement = props.profilePage.posts.map( p =>\r\n      <Post message={p.message}\r\n            likeCounts={p.likeCounts}\r\n            id={new Date().getTime()} /> )\r\n\r\n    let addNewMessage = (value: any)=>{\r\n        props.onAddPost(value.newPostBody)\r\n    }\r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <h3>My post</h3>\r\n      <div>\r\n        <div className={classes.addPostAreaBlock}>\r\n            <AddPostFormRedux onSubmit={addNewMessage} />\r\n        {/*  <textarea*/}\r\n        {/*            value={props.profilePage.newPostText}*/}\r\n        {/*            onChange={newTextChangeHandler}*/}\r\n        {/*  ></textarea>*/}\r\n        {/*</div>*/}\r\n        {/*<div className={classes.addPostButtonBlock} >*/}\r\n        {/*  <button onClick={addPost}>Add Post</button>*/}\r\n        </div>\r\n      </div>\r\n      <div className={classes.posts}>\r\n          {postsElement}\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\ntype FormDataType = {\r\n    textarea: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props)=>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form:'dialogAddMessageForm'})(AddPostForm)\r\nexport default MyPosts","import React, {ChangeEvent} from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC, InitialStatePostType, postType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootReduxStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStatePostType\r\n    posts: Array<postType>\r\n}\r\ntype MapDispatchToProps = {\r\n    onAddPost: (newText: string)=> void,\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\n\r\n    const mapStateToProps = (state: RootReduxStateType ): MapStateToPropsType=>{\r\n        return{\r\n            profilePage:state.profilePage,\r\n            posts: state.profilePage.posts,\r\n        }\r\n    };\r\n    const mapDispatchToProps = (dispatch: Dispatch ): MapDispatchToProps=> {\r\n        return {\r\n            onAddPost: (newText:string) => {\r\n                dispatch(addPostAC(newText))\r\n            },\r\n        }\r\n    };\r\n\r\n    const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(status: string)=> void\r\n}\r\n\r\nconst Profile = React.memo((props: ProfilePropsType) => {\r\n  return (\r\n    <div className={classes.content}>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n})\r\nexport default Profile;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport Profile from './Profile';\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n    componentDidMount() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.content}>\r\n                <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype ContactsType = {\r\n    \"facebook\": string | null,\r\n    \"website\": string | null,\r\n    \"vk\": string | null,\r\n    \"twitter\": string | null,\r\n    \"instagram\": string | null,\r\n    \"youtube\": string | null,\r\n    \"github\": string | null,\r\n    \"mainLink\": string | null,\r\n}\r\ntype PhotoType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\nexport type ProfileType = {\r\n    \"aboutMe\": string | null,\r\n    \"contacts\": ContactsType,\r\n    \"lookingForAJob\": boolean | null,\r\n    \"lookingForAJobDescription\": string | null,\r\n    \"fullName\": string | null,\r\n    \"userId\": number | null,\r\n    \"photos\": PhotoType\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile:(userId: number | null)=> void\r\n    getStatus:(userId: number | null)=> void\r\n    updateStatus:(status: string)=> void\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType = RouteComponentProps<PathParamType> & ProfileUsersPropsType\r\n\r\nexport type ProfileUsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps =(state: RootReduxStateType): MapStateToPropsType=>{\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport {HeaderContainerType} from \"./HeaderContainer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nconst Header = React.memo((props: HeaderContainerType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <header className={classes.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Logo_TV_2015.svg/1200px-Logo_TV_2015.svg.png\"\r\n                alt=\"logo\"/>\r\n\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={logoutCallback}>logout</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n})\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return (\r\n            <Header login={this.props.login} isAuth={this.props.isAuth}/>\r\n        );\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n}\r\nexport type HeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: RootReduxStateType):mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps , {logout})(HeaderContainer);","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport style from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'email'}\r\n                       placeholder={'Login'}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'password'}\r\n                       placeholder={'Password'}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n            {props.error &&<div className={style.someError}>{props.error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = React.memo((props:any) => {\r\n    const  isAuth = useSelector((state:RootReduxStateType)=> state.auth.isAuth)\r\n    let onSubmit =(formData: FormDataType)=>{\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default connect(null, {login})(Login)","import React, {ComponentType} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Music from './components/Music/Music';\r\nimport News from './components/News/News';\r\nimport Setting from './components/Setting/Setting';\r\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\r\nimport store, {RootReduxStateType} from \"./redux/redux-store\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializedApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\n\r\n\r\nclass App extends React.Component<mapStateToPropsType & mapDispatchToPropsType> {\r\n  componentDidMount() {\r\n    this.props.initializedApp();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n    return <BrowserRouter>\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar state={this.props.stateForNavbar}/>\r\n        <div className=\"app-wrapper-content\">\r\n          <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n          <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n          <Route path='/users' render={() => <UsersContainer/>}/>\r\n          <Route path='/login' render={() => <Login/>}/>\r\n          <Route path='/music' render={() => <Music/>}/>\r\n          <Route path='/news' render={() => <News/>}/>\r\n          <Route path='/setting' render={() => <Setting/>}/>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>;\r\n  }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  initialized: boolean\r\n  stateForNavbar: any\r\n}\r\ntype mapDispatchToPropsType = {\r\n  initializedApp:()=>void\r\n}\r\n\r\nconst mapStateToProps =(state: RootReduxStateType): mapStateToPropsType => ({\r\n  initialized:state.app.initialized,\r\n  stateForNavbar: state.navbarPage\r\n})\r\n\r\nlet AppClass = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps,{initializedApp}))(App);\r\n\r\nconst AppContainer: React.FC = () => {\r\n  return <BrowserRouter>\r\n    <Provider store={store}>\r\n      <AppClass />\r\n    </Provider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default AppContainer\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport AppContainer from \"./App\";\r\n\r\n\r\n    ReactDOM.render(<AppContainer />, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3ioei\",\"error\":\"FormsControls_error__3p3c6\",\"someError\":\"FormsControls_someError__3vEc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1GKQ3\",\"mainimg\":\"Profile_mainimg__10R4y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__24D9b\",\"posts\":\"MyPosts_posts__1JATQ\",\"addPostBlock\":\"MyPosts_addPostBlock__1bSNh\",\"addPostAreaBlock\":\"MyPosts_addPostAreaBlock__21kQy\",\"addPostButtonBlock\":\"MyPosts_addPostButtonBlock__fCzOZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageBlock\":\"Paginator_pageBlock__1H8JD\",\"selectedPage\":\"Paginator_selectedPage__49Bpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2ONw7\",\"mainimg\":\"ProfileInfo_mainimg__3R55B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2matS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__D7bkY\",\"loginBlock\":\"Header_loginBlock__21Ia6\"};"],"sourceRoot":""}