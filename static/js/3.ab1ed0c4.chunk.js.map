{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","React","memo","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","someError","createField","Input","type","Textarea","Object","keys","contacts","map","key","classes","contact","ProfileInfo","Preloader","content","src","alt","mainimg","photos","large","userPhoto","mainPhoto","isOwner","target","files","length","savePhoto","initialValues","formData","saveProfile","then","goToEditMode","userId","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","Post","item","message","likeCounts","AddPostFormRedux","required","MyPosts","postsElement","posts","reverse","p","id","Date","getTime","postsBlock","addPostAreaBlock","addPost","newPostBody","MyPostsContainer","profilePage","actions","addPostAC","Profile","ProfileContainer","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.ab1ed0c4.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReduxStateType): mapStateToPropsForRedirectType=>{\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent =( props: mapStateToPropsForRedirectType) =>{\r\n            let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1GKQ3\",\"mainimg\":\"Profile_mainimg__10R4y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2ONw7\",\"mainimg\":\"ProfileInfo_mainimg__3R55B\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2UnZt\",\"contact\":\"ProfileInfo_contact__93i0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__24D9b\",\"posts\":\"MyPosts_posts__1JATQ\",\"addPostBlock\":\"MyPosts_addPostBlock__1bSNh\",\"addPostAreaBlock\":\"MyPosts_addPostAreaBlock__21kQy\",\"addPostButtonBlock\":\"MyPosts_addPostButtonBlock__fCzOZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Pbaz\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = React.memo( (props: ProfileStatusType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const activeEditMode = ()=>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = ()=>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeStatus =(e: ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activeEditMode}>{props.status || '----'}</span>\r\n                </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} onChange={onChangeStatus} onBlur={deactivateEditMode} autoFocus/>\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport style from \"../../Common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../redux/types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            {error &&<div className={style.someError}>{error}</div>}\r\n            <div>\r\n                <b>Full name</b>:{createField<ProfileTypeKeys>(\"Full name\", 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                    {createField('','lookingForAJob',[],Input, {type:'checkbox'})}\r\n            </div>\r\n            <div>\r\n                <b>My prof skill</b>:\r\n                {createField('My prof skill','lookingForAJobDescription',[],Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField('About me','aboutMe',[],Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:{\r\n                Object\r\n                    .keys(profile.contacts)\r\n                    .map((key: string) => {\r\n                        return  <div key={key} className={classes.contact}>\r\n                            {/* todo: create some solution for embedded objects */}\r\n                            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                        </div>})\r\n            }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/types/types\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo = React.memo((props: ProfileInfoType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n    return (\r\n        <div className={classes.content}>\r\n            <img src=\"http://www.rosphoto.com/images/u/articles/1511/4-dalius-baranauskas.jpg\" alt=\"photo\"\r\n                 className={classes.mainimg}/>\r\n            <img src={props.profile.photos.large || userPhoto} className={classes.mainPhoto}/>\r\n            {props.isOwner && <input type='file' onChange={onMainPhotoSelected}/>}\r\n\r\n            {editMode ?\r\n                <ProfileDataForm  initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/> :\r\n                <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {\r\n                    setEditMode(true)\r\n                }}/>}\r\n\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            {props.profile.userId} - my id!!!\r\n\r\n        </div>\r\n    )\r\n})\r\ntype ProfileDataPropsType =\r\n    {\r\n        profile: ProfileType\r\n        isOwner: boolean\r\n        goToEditMode: () => void\r\n    }\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>:{profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:{profile.lookingForAJob}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My prof skill</b>:{profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>:{profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:{\r\n                Object\r\n                    .keys(profile.contacts)\r\n                    .map((key: string) => {\r\n                        return <Contacts key={key} contactTitle={key}\r\n                                         contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                    })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = { contactTitle: string, contactValue: string }\r\nexport const Contacts: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={classes.contact}><b>{contactTitle}</b>: {contactValue} </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\nconst Post = React.memo((props: PostType) => {\r\n  return (<div className={classes.content}>\r\n    <div className={classes.item}>\r\n      <img src=\"https://i.pinimg.com/564x/e7/99/2f/e7992f29c5f2f4fc61692299f4b30bbc.jpg\" alt=\"\" />\r\n          {props.message}\r\n          <div>\r\n              <span>like </span> {props.likeCounts}\r\n          </div>\r\n          </div>\r\n  </div>\r\n  )\r\n})\r\nexport default Post;","import {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Input) }\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddPostFormRedux = reduxForm<AddPostFormValuesType, PropsType>({form: 'dialogAddMessageForm'})(AddPostForm)","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\"\r\nimport Post from './Post/Post';\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {AddPostFormRedux} from './AddPostForm/AddPostForm';\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElement =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p =>\r\n                <Post message={p.message}\r\n                      key={p.id}\r\n                      likeCounts={p.likeCounts}\r\n                      id={new Date().getTime()}/>)\r\n\r\n    let addNewMessage = (value: any) => {\r\n        props.addPost(value.newPostBody)\r\n    }\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My post</h3>\r\n            <div>\r\n                <div className={classes.addPostAreaBlock}>\r\n                    <AddPostFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\n\r\nimport {RootReduxStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps = (state: RootReduxStateType) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        posts: state.profilePage.posts,\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, RootReduxStateType>(mapStateToProps, {\r\n    addPost: actions.addPostAC\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/types/types\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus:(status: string)=> void\r\n    savePhoto:(file: File)=> void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    isOwner:boolean\r\n}\r\n\r\nconst Profile = React.memo((props: ProfilePropsType) => {\r\n  return (\r\n    <div className={classes.content}>\r\n      <ProfileInfo profile={props.profile}\r\n                   savePhoto={props.savePhoto}\r\n                   saveProfile={props.saveProfile}\r\n                   status={props.status}\r\n                   updateStatus={props.updateStatus}\r\n                   isOwner={props.isOwner}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n})\r\nexport default Profile;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport Profile from './Profile';\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../redux/types/types\";\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile:(userId: number | null)=> void\r\n    getStatus:(userId: number | null)=> void\r\n    updateStatus:(status: string)=> void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    savePhoto:(file: File)=> void\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType =  ReturnType<typeof mapStateToProps>\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile(){\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId){\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.content}>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         isOwner={!this.props.match.params.userId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps =(state: RootReduxStateType)=>{\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}