{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","React","memo","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileInfo","profile","className","classes","content","src","alt","mainimg","userId","photos","small","fullName","lookingForAJobDescription","aboutMe","Preloader","Post","item","message","likeCounts","MyPosts","postsElement","profilePage","posts","map","p","id","Date","getTime","postsBlock","addPostAreaBlock","AddPostFormRedux","onSubmit","onAddPost","newPostBody","maxLength30","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","dispatch","newText","addPostAC","Profile","ProfileContainer","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.ee51842f.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReduxStateType): mapStateToPropsForRedirectType=>{\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent =( props: mapStateToPropsForRedirectType) =>{\r\n            let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1GKQ3\",\"mainimg\":\"Profile_mainimg__10R4y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2ONw7\",\"mainimg\":\"ProfileInfo_mainimg__3R55B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__24D9b\",\"posts\":\"MyPosts_posts__1JATQ\",\"addPostBlock\":\"MyPosts_addPostBlock__1bSNh\",\"addPostAreaBlock\":\"MyPosts_addPostAreaBlock__21kQy\",\"addPostButtonBlock\":\"MyPosts_addPostButtonBlock__fCzOZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2matS\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = React.memo( (props: ProfileStatusType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const activeEditMode = ()=>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = ()=>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeStatus =(e: ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activeEditMode}>{props.status || '----'}</span>\r\n                </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} onChange={onChangeStatus} onBlur={deactivateEditMode} autoFocus/>\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(status: string)=> void\r\n}\r\n\r\nconst ProfileInfo = React.memo((props: ProfileInfoType) => {\r\n    if(!props.profile){\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={classes.content}>\r\n            <div>\r\n                <img src=\"http://www.rosphoto.com/images/u/articles/1511/4-dalius-baranauskas.jpg\" alt=\"photo\"\r\n                     className={classes.mainimg}/>\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n                {props.profile.userId} - my id!!!\r\n                <img src={props.profile.photos.small}/>\r\n                <h1>Привет, меня зовут {props.profile.fullName}</h1>\r\n                <p> работа: {props.profile.lookingForAJobDescription}</p>\r\n                <p>Все что нужно знать обо мне так это то, что {props.profile.aboutMe}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from \"./Post.module.css\"\r\nimport {postType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst Post = React.memo((props: postType) => {\r\n  return (<div className={classes.content}>\r\n    <div className={classes.item}>\r\n      <img src=\"https://i.pinimg.com/564x/e7/99/2f/e7992f29c5f2f4fc61692299f4b30bbc.jpg\" alt=\"\" />\r\n          {props.message}\r\n          <div>\r\n              <span>like </span> {props.likeCounts}\r\n          </div>\r\n          </div>\r\n  </div>\r\n  )\r\n})\r\nexport default Post;","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\"\r\nimport Post from './Post';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n  let postsElement = props.profilePage.posts.map( p =>\r\n      <Post message={p.message}\r\n            likeCounts={p.likeCounts}\r\n            id={new Date().getTime()} /> )\r\n\r\n    let addNewMessage = (value: any)=>{\r\n        props.onAddPost(value.newPostBody)\r\n    }\r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <h3>My post</h3>\r\n      <div>\r\n        <div className={classes.addPostAreaBlock}>\r\n            <AddPostFormRedux onSubmit={addNewMessage} />\r\n        {/*  <textarea*/}\r\n        {/*            value={props.profilePage.newPostText}*/}\r\n        {/*            onChange={newTextChangeHandler}*/}\r\n        {/*  ></textarea>*/}\r\n        {/*</div>*/}\r\n        {/*<div className={classes.addPostButtonBlock} >*/}\r\n        {/*  <button onClick={addPost}>Add Post</button>*/}\r\n        </div>\r\n      </div>\r\n      <div className={classes.posts}>\r\n          {postsElement}\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\ntype FormDataType = {\r\n    textarea: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props)=>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form:'dialogAddMessageForm'})(AddPostForm)\r\nexport default MyPosts","import React, {ChangeEvent} from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC, InitialStatePostType, postType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootReduxStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStatePostType\r\n    posts: Array<postType>\r\n}\r\ntype MapDispatchToProps = {\r\n    onAddPost: (newText: string)=> void,\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\n\r\n    const mapStateToProps = (state: RootReduxStateType ): MapStateToPropsType=>{\r\n        return{\r\n            profilePage:state.profilePage,\r\n            posts: state.profilePage.posts,\r\n        }\r\n    };\r\n    const mapDispatchToProps = (dispatch: Dispatch ): MapDispatchToProps=> {\r\n        return {\r\n            onAddPost: (newText:string) => {\r\n                dispatch(addPostAC(newText))\r\n            },\r\n        }\r\n    };\r\n\r\n    const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(status: string)=> void\r\n}\r\n\r\nconst Profile = React.memo((props: ProfilePropsType) => {\r\n  return (\r\n    <div className={classes.content}>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n})\r\nexport default Profile;","import React from 'react';\r\nimport classes from \"./Profile.module.css\"\r\nimport Profile from './Profile';\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n    componentDidMount() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.content}>\r\n                <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype ContactsType = {\r\n    \"facebook\": string | null,\r\n    \"website\": string | null,\r\n    \"vk\": string | null,\r\n    \"twitter\": string | null,\r\n    \"instagram\": string | null,\r\n    \"youtube\": string | null,\r\n    \"github\": string | null,\r\n    \"mainLink\": string | null,\r\n}\r\ntype PhotoType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\nexport type ProfileType = {\r\n    \"aboutMe\": string | null,\r\n    \"contacts\": ContactsType,\r\n    \"lookingForAJob\": boolean | null,\r\n    \"lookingForAJobDescription\": string | null,\r\n    \"fullName\": string | null,\r\n    \"userId\": number | null,\r\n    \"photos\": PhotoType\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile:(userId: number | null)=> void\r\n    getStatus:(userId: number | null)=> void\r\n    updateStatus:(status: string)=> void\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType = RouteComponentProps<PathParamType> & ProfileUsersPropsType\r\n\r\nexport type ProfileUsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps =(state: RootReduxStateType): MapStateToPropsType=>{\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}