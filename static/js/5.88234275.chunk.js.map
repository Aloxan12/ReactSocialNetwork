{"version":3,"sources":["pages/ChatPage/ChatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","ChatPage","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflow","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","src","photo","width","userName","AddMessageForm","obj","TypeError","setMessage","value","onChange","disabled","onClick","sendMessage"],"mappings":"mUAiBaA,GAFEC,UARY,WACvB,OACI,8BACI,cAAC,EAAD,OAOkB,WAC1B,IAAMC,EAAWC,cAEXC,EAASC,aAA4C,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAS/E,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,mBAKb,gCACgB,UAAXN,GAAsB,iEACvB,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,YAMHO,EAAqB,WAC9B,IAAMC,EAAWP,aAAmD,SAAAC,GAAK,OAAIA,EAAMC,KAAKK,YAClFC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAT,qBAAU,WACa,IAAD,EAAdQ,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAGA,sBAAKS,MAAO,CAACC,OAAQ,QAASC,SAAU,QAASC,SAhB/B,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAK1B,QAKTuB,EAAqDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAC3E,OACI,gCACI,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAACuB,MAAO,UAD5C,IACuD,4BAAIP,EAAQQ,WAC/D,uBACCR,EAAQA,QACT,6BAICS,EAA+B,SAAC,IC9E9B,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCD6Ec,IACjD,MAA8BjC,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBY,EAAhB,KACM/C,EAAWC,cACXC,EAASC,aAA4C,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAa/E,OACI,gCACI,8BACI,0BAAU8C,MAAOb,EAASc,SAdrB,SAAC1B,GACdwB,EAAWxB,EAAEE,cAAcuB,YAevB,8BACI,wBAAQE,SAAqB,UAAXhD,EAAoBiD,QAdvB,WAClBhB,IAGLnC,EAASoD,YAAYjB,IACrBY,EAAW,MASH","file":"static/js/5.88234275.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType, StatusType} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChatMessageType, sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n\r\nexport const Chat: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector<RootReduxStateType, StatusType>(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    },)\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error.Please refresh page</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Messages: React.FC = () => {\r\n    const messages = useSelector<RootReduxStateType, ChatMessageType[]>(state => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: '400px', overflow: \"auto\"}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\nexport const AddMessageForm: React.FC<{}> = ({}) => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<RootReduxStateType, StatusType>(state => state.chat.status)\r\n\r\n    const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea value={message} onChange={onChange}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}