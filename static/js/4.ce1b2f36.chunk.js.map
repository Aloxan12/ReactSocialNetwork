{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogsItem","React","memo","path","id","className","classes","dialog","active","src","name","Message","massage","message","maxLength50","maxLengthCreator","AddMessageForm","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","reduxForm","form","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messageElements","messages","m","dialogsItems","massages","addMessage","value","newMessageBody","compose","dispatch","newMessage","actions","addMessageAC"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,8B,qHCQpNC,EAA6B,SAACC,GAC9B,MAAM,CACFC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OAFqCC,YAAQN,EAARM,EAPZ,SAAEC,GACnB,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,YACA,OAAKL,EAEE,cAACG,EAAD,eAAeG,IAFF,cAAC,IAAD,CAAUC,GAAI,gB,6FCO/BC,EAdKC,IAAMC,MAAK,SAACL,GAC5B,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACI,sBAAKC,UAAYC,IAAQC,OAAS,IAAMD,IAAQE,OAAhD,UACI,8BACA,qBAAKC,IAAI,kFAET,cAAC,IAAD,CAASV,GAAII,EAAb,SACKN,EAAMa,aCNRC,EALCV,IAAMC,MAAK,SAACL,GACxB,OACI,qBAAKQ,UAAWC,IAAQM,QAAxB,SAAkCf,EAAMgB,a,mCCD1CC,EAAcC,YAAiB,IAC/BC,EAAwEf,IAAMC,MAAK,SAACL,GACtF,OACI,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXX,KAAM,iBACNY,YAAa,qBACbC,SAAU,CAACC,IAAUV,OAGhC,8BACI,kDAKDW,cAAoC,CAACC,KAAM,wBAA3CD,CAAoET,GCIpEW,EAvBC1B,IAAMC,MAAK,SAACL,GACxB,IAAI+B,EAAkB/B,EAAMgC,YAAYC,QAAQC,KAAK,SAAAC,GAAC,OAAG,cAAC,EAAD,CAAa5B,GAAI4B,EAAE5B,GAAIM,KAAMsB,EAAEtB,UACpFuB,EAAkBpC,EAAMgC,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,aAM9E,OACI,sBAAKR,UAAWC,IAAQwB,QAAxB,UACI,qBAAKzB,UAAWC,IAAQ8B,aAAxB,SACKR,IAEL,sBAAKvB,UAAWC,IAAQ+B,SAAxB,UACKJ,EACD,qBAAK5B,UAAWC,IAAQgC,WAAxB,SACI,cAAC,EAAD,CAAgBrB,SAXZ,SAACsB,GACjB1C,EAAMyC,WAAWC,EAAMC,8B,kCCkBhBC,sBACX7C,aAfoB,SAACL,GACrB,MAAM,CACFsC,YAAatC,EAAMsC,gBAGA,SAACa,GACxB,MAAM,CACFJ,WAAW,SAACK,GACRD,EAASE,IAAQC,aAAaF,SAQtCjD,IAFW+C,CAGbd","file":"static/js/4.ce1b2f36.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__19NLv\",\"dialogsItems\":\"Dialogs_dialogsItems__1K_cq\",\"dialog\":\"Dialogs_dialog__2YVY5\",\"massages\":\"Dialogs_massages__3xbtD\",\"massage\":\"Dialogs_massage__1r1vQ\",\"addMessage\":\"Dialogs_addMessage__Zw-sq\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReduxStateType): mapStateToPropsForRedirectType=>{\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent =( props: mapStateToPropsForRedirectType) =>{\r\n            let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import { type } from 'os'\r\nimport React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\nexport type DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogsItem = React.memo((props:DialogsItemType) =>{\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className= {classes.dialog + ' ' + classes.active}>\r\n            <div>\r\n            <img src=\"https://img3.goodfon.ru/wallpaper/nbig/f/67/naruto-shippuden-uzumaki-31.jpg\" />\r\n            </div>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default DialogsItem;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\nconst Message = React.memo((props:MessageType)=>{\r\n    return (\r\n        <div className={classes.massage}>{props.message}</div>\r\n    )\r\n})\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType>> = React.memo((props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogsItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport AddMessageForm, { NewMessageFormValuesType} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = React.memo((props: DialogsPropsType ) =>{\r\n    let dialogsElements = props.dialogsPage.dialogs.map( d =><DialogsItem id={d.id} name={d.name}  /> )\r\n    let messageElements = props.dialogsPage.messages.map(m => <Message message={m.message} /> )\r\n\r\n\r\n    let addNewMessage = (value: NewMessageFormValuesType)=>{\r\n        props.addMessage(value.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.massages}>\r\n                {messageElements}\r\n                <div className={classes.addMessage}>\r\n                    <AddMessageForm onSubmit={addNewMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {mapStateToPropsForRedirectType, withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage:(newMessage: string)=> void\r\n}\r\nexport type DialogsPropsType = MapDispatchToPropsType & MapStateToPropsType & mapStateToPropsForRedirectType\r\n\r\nconst mapStateToProps = (state: RootReduxStateType): MapStateToPropsType=>{\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType=>{\r\n    return{\r\n        addMessage:(newMessage: string)=>{\r\n            dispatch(actions.addMessageAC(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}