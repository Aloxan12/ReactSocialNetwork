{"version":3,"sources":["redux/dialogs-reducer.tsx","assets/images/user.png","api/api.ts","components/Users/users.module.css","components/Navbar/Navbar.module.css","components/Common/FormsControls/FormsControls.tsx","reportWebVitals.ts","components/Navbar/Friends/Friend/Friend.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Setting/Setting.tsx","redux/navbar-reducer.tsx","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","assets/images/loader.gif","components/Common/Preloader/Preloader.tsx","components/Common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.tsx"],"names":["initialState","messages","id","message","dialogs","name","addMessageAC","messageText","type","postMessage","dialogsReducer","state","action","filter","m","messageId","ResultCodeForCapcthaEnum","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","getUsers","currentPage","pageSize","get","then","response","data","unfollow","delete","follow","post","getProfile","userId","ProfileAPI","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","res","getStatus","updateStatus","status","put","savePhoto","file","formData","FormData","append","saveProfile","profile","module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Friends","React","memo","path","src","to","friendsElements","friends","map","d","Friend","classes","blockFriends","Navbar","nav","item","activeClassName","activLink","Music","News","Setting","navbarReducer","unfollowSuccess","userID","followSuccess","setCurrentPage","toggleIsFetching","isFetching","toggleFollowingIsProgress","users","totalUsersCounts","followingIsProgress","followUnfollow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","u","followed","totalPage","setAuthUserData","isAuth","payload","getCaptchaUrlSuccess","captchaUrl","getAuthUsersData","console","log","url","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","navbarPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Paginator","totalItemCounts","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","pageBlock","onClick","p","selectedPage","e","User","user","photos","small","userPhoto","UsersPhoto","disabled","some","Users","pageCount","getUsersSelector","getPageSizeSelector","createSelector","getTotalUsersCountsSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingIsProgressSelector","UsersAPIComponent","pageNumber","this","Preloader","Component","compose","connect","bind","items","totalCount","Header","useDispatch","header","alt","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","onSubmit","required","undefined","style","someError","Login","useSelector","CaptchaIsRequired","length","stopSubmit","_error","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","initializedApp","window","addEventListener","removeEventListener","stateForNavbar","render","UsersContainer","AppClass","withRouter","promise","Promise","all","catch","finally","AppContainer","basename","process","ReactDOM","document","getElementById","value","maxLengthCreator","maxLength","preloader","posts","likeCounts","addPostAC","postText","setStatus","getUserProfile","photo","getState","Error","reject","newPost","postId"],"mappings":"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","file":"static/js/main.229d37a5.chunk.js","sourcesContent":["\r\ntype messageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype dialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type initialStateDialogsType = {\r\n    messages: Array<messageType>\r\n    dialogs:Array<dialogsType>\r\n}\r\nlet initialState: initialStateDialogsType = {\r\n    messages: [\r\n        { id: 1, message: \"Hi\"},\r\n        { id: 2, message: \"I am here\"},\r\n        { id: 3, message: \"bye\"},\r\n    ] as Array<messageType>,\r\n    dialogs: [\r\n        { id: 1, name: \"Alex\"},\r\n        { id: 2, name: \"Victor\"},\r\n        { id: 3, name: \"Sasha\"},\r\n        { id: 4, name: \"Mike\"},\r\n        { id: 5, name: \"Bob\"},\r\n    ] as Array<dialogsType>\r\n}\r\ntype ActionType = ReturnType<typeof addMessageAC> | ReturnType<typeof changeNewMessageTextCreate>\r\n| ReturnType<typeof removeMessageAC>\r\n\r\nconst dialogsReducer = (state: initialStateDialogsType = initialState, action: ActionType): initialStateDialogsType=>{\r\n    switch (action.type){\r\n        case \"ADD-MESSAGE\":{\r\n            const message = action.postMessage\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: message}]\r\n            }\r\n        }\r\n        case \"REMOVE-MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m=>m.id != action.messageId)\r\n            }\r\n        case \"UPDATE-YOUR-MESSAGE-TEXT\":{\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addMessageAC =(messageText:string)=>{\r\n    return{\r\n        type:'ADD-MESSAGE',\r\n        postMessage: messageText\r\n    }as const\r\n}\r\nexport const removeMessageAC =(messageId:number)=>{\r\n    return{\r\n        type:'REMOVE-MESSAGE',\r\n        messageId\r\n    }as const\r\n}\r\nexport const changeNewMessageTextCreate =(newText:string)=>{\r\n    return{\r\n        type:'UPDATE-YOUR-MESSAGE-TEXT',\r\n        newText: newText\r\n    }as const\r\n}\r\nexport default dialogsReducer","export default __webpack_public_path__ + \"static/media/user.ab7efdc7.png\";","import * as axios from \"axios\";\r\nimport {ProfileType} from \"../components/Profile/ProfileContainer\";\r\n\r\nconst instance = axios.default.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"07c457bc-e742-4380-afc8-e78bc10fd120\"\r\n    }\r\n})\r\nexport type ThunkLoginType = {\r\n    resultCode: number\r\n    messages: string[],\r\n        data: {\r\n    userId: number\r\n}\r\n}\r\n\r\nexport const UsersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unfollow(id: number | null) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(id: number | null) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfile(userId: number | null) {\r\n        return ProfileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport enum ResultCodeForCapcthaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null){\r\n        return instance.post<ThunkLoginType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    }\r\n}\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    },\r\n    savePhoto(file: File){\r\n        const formData = new FormData();\r\n        formData.append('image', file)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType){\r\n        return instance.put(`profile`, profile).then(res => res.data);\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersPhoto\":\"users_UsersPhoto__3Y8x7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1DaVf\",\"item\":\"Navbar_item__WDfDz\",\"activLink\":\"Navbar_activLink__15RwJ\",\"blockFriends\":\"Navbar_blockFriends__2qOQQ\",\"friends\":\"Navbar_friends__zYnjt\"};","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\nimport  {WrappedFieldMetaProps, WrappedFieldProps, Field} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta:{touched, error}, children})=>{\r\n\r\n    const hasError = touched && error;\r\n\r\n    return <div className={styles.formControl + ' ' + (hasError ?styles.error : '')}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        { hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type FriendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nconst Friends = React.memo((props: FriendType)=>{\r\n    let path = \"/Navbar/\" + props.id;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.src} />\r\n            </div>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})\r\nexport default Friends;","import React from 'react';\r\nimport classes  from './../Navbar.module.css';\r\nimport Friend from \"./Friend/Friend\";\r\nimport {friendsType} from \"../Navbar\";\r\n\r\nexport type FriendsType = {\r\n    state:friendsType\r\n}\r\n\r\nconst Friends = React.memo((props: FriendsType)=>{\r\n    let friendsElements = props.state.friends.map( d =><Friend id={d.id} name={d.name} src={d.src}  /> )\r\n    return (\r\n        <div>\r\n            <div className={classes.blockFriends}>\r\n                <h3>Friends</h3>\r\n                <div className={classes.friends}>\r\n                    {friendsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Friends;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\nimport Friends from \"./Friends/Friends\";\r\nimport {friendType} from \"../../redux/navbar-reducer\";\r\n\r\nexport type friendsType = {\r\n    friends: Array<friendType>\r\n}\r\n\r\nexport type NavbarType = {\r\n    state: friendsType\r\n}\r\n\r\nconst Navbar = React.memo((props: NavbarType) => {\r\n    return (<nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.activLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.activLink}>Massage</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.activLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.activLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.activLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/setting\" activeClassName={classes.activLink}>Setting</NavLink>\r\n            </div>\r\n            <div>\r\n                <Friends state={props.state}/>\r\n            </div>\r\n        </nav>\r\n    )\r\n})\r\nexport default Navbar;","import React from 'react'\r\nimport classes from './Music.module.css'\r\n\r\nconst Music = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react'\r\nimport classes from './News.module.css'\r\n\r\nconst News = (props: any) =>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react'\r\nimport classes from './Setting.module.css'\r\n\r\nconst Setting = (props: any) =>{\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Setting;","\r\nexport type friendType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\nexport type ActionType ={}\r\nexport type initialStateType = {\r\n    friends: Array<friendType>\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        { id: 1, name: 'Kirill', src:\"https://cdni.rt.com/russian/images/2019.03/article/5c99e32a18356130668b45a2.JPG\"},\r\n        { id: 2, name: \"Peeter\", src: \"https://vokrug-tv.ru/pic/person/2/2/d/b/22db573c1118bc091c4267e15258d8ce.jpeg\"},\r\n        { id: 3, name: \"Vlad\", src: \"https://upload.wikimedia.org/wikipedia/ru/4/4e/Patrick_star-4854.jpg\"},\r\n    ],\r\n}\r\n\r\nconst navbarReducer = (state: initialStateType = initialState, action: ActionType):initialStateType=>{\r\n\r\n    return state\r\n}\r\n\r\nexport default navbarReducer","import {Dispatch} from \"redux\";\r\nimport {UsersAPI} from \"../api/api\";\r\n\r\nexport const FOLLOW = \"FOLLOW\"\r\nexport const UNFOLLOW = \"UNFOLLOW\"\r\nexport const SET_USERS = \"SET_USERS\"\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nexport const SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\"\r\nexport const TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport const unfollowSuccess = (userID: number) => ({type: UNFOLLOW, userID} as const)\r\nexport const followSuccess = (userID: number) => ({type: FOLLOW, userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalPage: number) => ({type: SET_TOTAL_COUNT, totalPage} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingIsProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\ntype ActionType = ReturnType<typeof unfollowSuccess> | ReturnType<typeof followSuccess> | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage> | ReturnType<typeof setTotalUsersCount> | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingIsProgress>\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type InitialStateUsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCounts: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingIsProgress: Array<number>\r\n}\r\n\r\nlet initialState: InitialStateUsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCounts: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingIsProgress: [],\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: ActionType): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                //users:[...state.users]  идентичная запись\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET_TOTAL_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCounts: action.totalPage\r\n            }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingIsProgress: action.isFetching\r\n                    ? [...state.followingIsProgress, action.userId]\r\n                    : state.followingIsProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        const data = await UsersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch, userId: number,apiMethod: any, actionCreator: any )=>{\r\n    dispatch(toggleFollowingIsProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingIsProgress(false, userId))\r\n}\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.follow.bind(UsersAPI),followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollow(dispatch, userId, UsersAPI.unfollow.bind(UsersAPI),unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","import {authAPI, ResultCodeForCapcthaEnum, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport const SET_USER_DATA = \"SET_USER_DATA\"\r\nexport const UNFOLLOW = \"UNFOLLOW\"\r\n\r\n\r\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n    type: SET_USER_DATA, payload: {id, login, email, isAuth}\r\n} as const)\r\nexport const getCaptchaUrlSuccess =(captchaUrl: string )=>({type:'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}}as const)\r\n\r\ntype ActionType = ReturnType<typeof setAuthUserData> | ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\nexport type InitialStateAuthType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nlet initialState: InitialStateAuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    isFetching: false,\r\n    captchaUrl: null // if null, then captcha is not required\r\n}\r\n\r\nexport const authReducer = (state: InitialStateAuthType = initialState, action: ActionType): InitialStateAuthType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getAuthUsersData = (): AppThunk => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const res = await authAPI.me();\r\n            if (res.data.resultCode === 0) {\r\n                let {id, login, email} = res.data.data\r\n                dispatch(setAuthUserData(id, login, email, true))\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AppThunk => {\r\n    return async (dispatch) => {\r\n        const res = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(getAuthUsersData())\r\n        }else {\r\n            if (res.data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = res.data.messages.length > 0 ? res.data.messages[0] : 'some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): AppThunk => async (dispatch) => {\r\n        const data = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = data.url\r\n            dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n    }\r\n\r\n\r\nexport const logout = (): AppThunk => {\r\n    return async (dispatch: any) => {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","import {AppThunk} from \"./redux-store\";\r\nimport {getAuthUsersData} from \"./auth-reducer\";\r\n\r\n\r\nexport const INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\"\r\n\r\ntype ActionType = ReturnType<typeof initializedSuccess>\r\n\r\nexport type InitialStateAuthType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateAuthType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateAuthType = initialState, action: ActionType): InitialStateAuthType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS} as const)\r\n\r\nexport const initializedApp = () => (dispatch: any) => {\r\n        let promise = dispatch(getAuthUsersData());\r\n        Promise.all([promise])\r\n            .then(()=>{\r\n                dispatch(initializedSuccess())\r\n            })\r\n            .catch((e) => {\r\n                //go fo pizza\r\n                console.log(e)\r\n            })\r\n            .finally(() => {\r\n                //dispatch(initializedSuccess(error))\r\n            })\r\n}\r\n\r\n\r\n\r\nexport default appReducer","import {AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarPage:navbarReducer,\r\n    users:usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type RootReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type StoreReduxType = typeof store\r\n\r\nexport type AppThunk <ReturnType = void> = ThunkAction<ReturnType, RootReduxStateType, unknown, AnyAction>\r\n\r\nexport default store","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames'\r\n\r\ntype PaginatorType = {\r\n    pageSize: number\r\n    portionSize?: number\r\n    totalItemCounts: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({totalItemCounts,\r\n                                                                  pageSize,\r\n                                                                  onPageChanged = x => x,\r\n                                                                  currentPage = 1,\r\n                                                                  portionSize = 15}) => {\r\n    let pagesCount = Math.ceil(totalItemCounts / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n     }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    return (\r\n        <div className={cn(styles.pageBlock)}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }) }\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport styles from \"./users.module.css\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    followingIsProgress: Array<number>\r\n}\r\n\r\nexport const User = React.memo((props: UserPropsType) => {\r\n    let u = props.user;\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                    <span>\r\n                        <div>\r\n                           <NavLink to={'/profile/' + u.id}>\r\n                                <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                     className={styles.UsersPhoto}/>\r\n                           </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}>Unfollow</button>\r\n                                : <button disabled={props.followingIsProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.follow(u.id)\r\n                                          }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport { Paginator } from \"../Common/Paginator/Paginator\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\nimport {User} from \"./User\";\r\n\r\n\r\nexport const Users = React.memo ((props: UsersPropsType) => {\r\n    let pageCount = Math.ceil(props.totalUsersCounts / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                props.users.map(u => <User followingIsProgress={props.followingIsProgress}\r\n                                           unfollow={props.unfollow}\r\n                                           follow={props.follow}\r\n                                           user={u}\r\n                                           key={u.id}\r\n                />)\r\n            }\r\n            <Paginator currentPage={props.currentPage}\r\n                       onPageChanged={props.onPageChanged}\r\n                       pageSize={props.pageSize}\r\n                       totalItemCounts={props.totalUsersCounts}  />\r\n        </div>\r\n    )\r\n})\r\n","import { createSelector } from \"reselect\";\r\nimport {RootReduxStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: RootReduxStateType)=> {\r\n    return state.users.users;\r\n}\r\nexport const getUsersSelector = (state: RootReduxStateType)=>{\r\n    return getUsers(state).filter( u=> true);\r\n}\r\nexport const getUserSuper = createSelector(getUsersSelector,(users) =>{\r\n    return users.filter( u=> true);\r\n})\r\nexport const getPageSizeSelector = (state: RootReduxStateType)=>{\r\n    return state.users.pageSize;\r\n}\r\nexport const getTotalUsersCountsSelector = (state: RootReduxStateType)=>{\r\n    return state.users.totalUsersCounts;\r\n}\r\nexport const getCurrentPageSelector = (state: RootReduxStateType)=>{\r\n    return state.users.currentPage;\r\n}\r\nexport const getIsFetchingSelector = (state: RootReduxStateType)=>{\r\n    return state.users.isFetching;\r\n}\r\nexport const getFollowingIsProgressSelector = (state: RootReduxStateType)=>{\r\n    return state.users.followingIsProgress;\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    toggleFollowingIsProgress,\r\n    InitialStateUsersType,\r\n    setCurrentPage,\r\n    getUsers, follow, unfollow, UserType,\r\n} from \"../../redux/users-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPageSelector,\r\n    getFollowingIsProgressSelector,\r\n    getIsFetchingSelector,\r\n    getPageSizeSelector, getTotalUsersCountsSelector,\r\n    getUsersSelector\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    users:Array<UserType>\r\n    pageSize: number\r\n    totalUsersCounts: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingIsProgress: Array<number>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    toggleFollowingIsProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCounts={this.props.totalUsersCounts}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       users={this.props.users}\r\n                       onPageChanged={this.onPageChanged}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n                       toggleFollowingIsProgress={this.props.toggleFollowingIsProgress}\r\n                       followingIsProgress={this.props.followingIsProgress}\r\n                       getUsers={this.props.getUsers}\r\n                       isFetching={this.props.isFetching}\r\n                       setCurrentPage={this.props.setCurrentPage}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const mapStateToProps = (state: RootReduxStateType): MapStateToPropsType => {\r\n//     return {\r\n//         usersPage: state.users,\r\n//         pageSize: state.users.pageSize,\r\n//         totalUsersCounts: state.users.totalUsersCounts,\r\n//         currentPage: state.users.currentPage,\r\n//         isFetching: state.users.isFetching,\r\n//         followingIsProgress: state.users.followingIsProgress\r\n//     }\r\n// }\r\nconst mapStateToProps = (state: RootReduxStateType): MapStateToPropsType => {\r\n    return {\r\n        users:getUsersSelector(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        totalUsersCounts: getTotalUsersCountsSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching:getIsFetchingSelector(state),\r\n        followingIsProgress: getFollowingIsProgressSelector(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleFollowingIsProgress,\r\n        getUsers,\r\n    })\r\n)\r\n(UsersAPIComponent)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport {HeaderContainerType} from \"./HeaderContainer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nconst Header = React.memo((props: HeaderContainerType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <header className={classes.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Logo_TV_2015.svg/1200px-Logo_TV_2015.svg.png\"\r\n                alt=\"logo\"/>\r\n\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={logoutCallback}>logout</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n})\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return (\r\n            <Header login={this.props.login} isAuth={this.props.isAuth}/>\r\n        );\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n}\r\nexport type HeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: RootReduxStateType):mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps , {logout})(HeaderContainer);","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxStateType} from \"../../redux/redux-store\";\r\nimport style from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    captcha: string\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error,captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", 'email', [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", 'password', [required], Input, {type:'password'})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type:'checkbox'})}\r\n\r\n                {captchaUrl && <img src={captchaUrl}/>}\r\n                {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", 'captcha', [required], Input, {})}\r\n            </div>\r\n            {error &&<div className={style.someError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport const Login = () => {\r\n    const  isAuth = useSelector((state:RootReduxStateType)=> state.auth.isAuth)\r\n    const  captchaUrl = useSelector((state:RootReduxStateType)=> state.auth.captchaUrl)\r\n    const dispatch = useDispatch()\r\n\r\n    let onSubmit =(formData: FormDataType)=>{\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React, {ComponentType} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Music from './components/Music/Music';\r\nimport News from './components/News/News';\r\nimport Setting from './components/Setting/Setting';\r\nimport {BrowserRouter, HashRouter, Redirect, Route, withRouter} from \"react-router-dom\";\r\nimport store, {RootReduxStateType} from \"./redux/redux-store\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport {Login} from './components/Login/Login';\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializedApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {initialStateType} from \"./redux/navbar-reducer\";\r\n\r\nconst DialogsContainer = React.lazy(()=>import (\"./components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(()=>import (\"./components/Profile/ProfileContainer\"));\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\nclass App extends React.Component<mapStateToPropsType & mapDispatchToPropsType> {\r\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    alert('Some error occured')\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.initializedApp()\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n    return <BrowserRouter>\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar state={this.props.stateForNavbar}/>\r\n        <div className=\"app-wrapper-content\">\r\n          <Route path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n          <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n          <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n          <Route path='/users' render={() => <UsersContainer/>}/>\r\n          <Route path='/login' render={() => <Login/>}/>\r\n          <Route path='/music' render={() => <Music/>}/>\r\n          <Route path='/news' render={() => <News/>}/>\r\n          <Route path='/setting' render={() => <Setting/>}/>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>;\r\n  }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  initialized: boolean\r\n  stateForNavbar: initialStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n  initializedApp:()=>void\r\n}\r\n\r\nconst mapStateToProps =(state: RootReduxStateType): mapStateToPropsType => ({\r\n  initialized:state.app.initialized,\r\n  stateForNavbar: state.navbarPage\r\n})\r\n\r\nlet AppClass = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps,{initializedApp}))(App);\r\n\r\nconst AppContainer: React.FC = () => {\r\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n      <AppClass />\r\n    </Provider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default AppContainer\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport AppContainer from \"./App\";\r\n\r\n\r\n    ReactDOM.render(<AppContainer />, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3ioei\",\"error\":\"FormsControls_error__3p3c6\",\"someError\":\"FormsControls_someError__3vEc_\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) =>{\r\n    if(!!value)return undefined\r\n\r\n    return 'Filed is required'\r\n}\r\nexport const maxLengthCreator =(maxLength:number)=> {\r\n    return (value: any) =>{\r\n        if(value && value.length > 30)return `Max length is ${maxLength} symbols`\r\n\r\n        return undefined;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/loader.c2493588.gif\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.gif\";\r\n\r\nconst Preloader = React.memo(()=>{\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n})\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageBlock\":\"Paginator_pageBlock__1H8JD\",\"selectedPage\":\"Paginator_selectedPage__49Bpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__D7bkY\",\"loginBlock\":\"Header_loginBlock__21Ia6\"};","import {ProfileType} from \"../components/Profile/ProfileContainer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI, UsersAPI} from \"../api/api\";\r\nimport {PhotosType} from \"./users-reducer\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\n\r\ntype ActionType = ReturnType<typeof addPostAC> | ReturnType<typeof setUserProfile>\r\n| ReturnType<typeof setStatus> | deleteActionType | ReturnType<typeof savePhotoSuccess>\r\n\r\nexport type postType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\nexport type InitialStatePostType  = {\r\n    posts: Array<postType>\r\n    profile:ProfileType\r\n    status: string\r\n}\r\n\r\nexport let initialState: InitialStatePostType = {\r\n    posts: [\r\n        {id: 1,message: \"Hello, It is my first massage\", likeCounts: 15},\r\n        {id: 2, message: \"Hello, I am Lesha\", likeCounts: 30},\r\n    ],\r\n    profile:{\r\n        \"aboutMe\": \"я круто чувак 1001%\",\r\n        \"contacts\": {\r\n            \"facebook\": \"facebook.com\",\r\n            \"website\": '',\r\n            \"vk\": \"vk.com/dimych\",\r\n            \"twitter\": \"https://twitter.com/@sdf\",\r\n            \"instagram\": \"instagra.com/sds\",\r\n            \"youtube\": '',\r\n            \"github\": \"github.com\",\r\n            \"mainLink\": ''\r\n        },\r\n        \"lookingForAJob\": true,\r\n        \"lookingForAJobDescription\": \"не ищу, а дурачусь!!!\",\r\n        \"fullName\": \"samurai dimych\",\r\n        \"userId\": 2,\r\n        \"photos\": {\r\n            \"small\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\r\n            \"large\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\r\n        }\r\n    },\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: InitialStatePostType = initialState, action: ActionType):InitialStatePostType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            const newPost = action.postMessage\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 8, message: newPost, likeCounts: 0}]\r\n        }}\r\n        case \"REMOVE-POST\":\r\n            return {\r\n            ...state,\r\n            posts: state.posts.filter(p=> p.id != action.postId)\r\n        }\r\n        case \"SET_USER_PROFILE\":{\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SAVE_PHOTO_SUCCESS\":{\r\n            return {...state, profile:{...state.profile, photos: action.photo}as ProfileType}\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        postMessage: postText\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: 'REMOVE-POST',\r\n        postId\r\n    } as const\r\n}\r\nexport type deleteActionType = ReturnType<typeof deletePostAC>\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: 'SET_USER_PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET_STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const savePhotoSuccess = (photo: PhotosType) => {\r\n    return {\r\n        type: 'SAVE_PHOTO_SUCCESS',\r\n        photo\r\n    } as const\r\n}\r\nexport const getUserProfile = (userId: number | null):AppThunk =>async (dispatch)=> {\r\n    const response = await UsersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: number | null):AppThunk =>async (dispatch)=> {\r\n     const response = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string):AppThunk => async (dispatch)=> {\r\n    try {\r\n        const response = await ProfileAPI.updateStatus(status)\r\n        if(response.data.resultCode === 0){\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (error){\r\n\r\n    }\r\n}\r\nexport const savePhoto = (file: File): AppThunk => async (dispatch)=> {\r\n    const response = await ProfileAPI.savePhoto(file)\r\n            if(response.data.resultCode === 0){\r\n                dispatch(savePhotoSuccess(response.data.photos))\r\n            }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): AppThunk => async (dispatch, getState)=> {\r\n    const userId = getState().auth.id\r\n    const data = await ProfileAPI.saveProfile(profile)\r\n    if(data.resultCode === 0){\r\n        if(userId != null){\r\n        dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}